
DOOR_LOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000241e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000241e  000024b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a6  008000a6  000024f8  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  000024f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ebd  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000528d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000053cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000553d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008071  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000099db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 10 	call	0x217c	; 0x217c <main>
      8a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"


                 /**************    Functions    ***************/
void DIO_voidSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == PIN_OUTPUT)      
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_voidSetPinDirection+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_voidSetPinDirection+0x100>
	{
		switch(Copy_u8PortID)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_voidSetPinDirection+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_voidSetPinDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_voidSetPinDirection+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_voidSetPinDirection+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_voidSetPinDirection+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
		{
			case PORTA_ID: SET_BIT(DDRA_REG, Copy_u8PinID); break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_voidSetPinDirection+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_voidSetPinDirection+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
			case PORTB_ID: SET_BIT(DDRB_REG, Copy_u8PinID); break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_voidSetPinDirection+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_voidSetPinDirection+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
			case PORTC_ID: SET_BIT(DDRC_REG, Copy_u8PinID); break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_voidSetPinDirection+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_voidSetPinDirection+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
			case PORTD_ID: SET_BIT(DDRD_REG, Copy_u8PinID); break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_voidSetPinDirection+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_voidSetPinDirection+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	
	else if(Copy_u8PinDir == PIN_INPUT)     
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_voidSetPinDirection+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8PortID)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_voidSetPinDirection+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_voidSetPinDirection+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_voidSetPinDirection+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_voidSetPinDirection+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_voidSetPinDirection+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_voidSetPinDirection+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
		{
			case PORTA_ID: CLR_BIT(DDRA_REG, Copy_u8PinID); break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_voidSetPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_voidSetPinDirection+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
			case PORTB_ID: CLR_BIT(DDRB_REG, Copy_u8PinID); break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_voidSetPinDirection+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_voidSetPinDirection+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
			case PORTC_ID: CLR_BIT(DDRC_REG, Copy_u8PinID); break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_voidSetPinDirection+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_voidSetPinDirection+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
			case PORTD_ID: CLR_BIT(DDRD_REG, Copy_u8PinID); break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_voidSetPinDirection+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_voidSetPinDirection+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
		}
	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue == PIN_HIGH)      
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_voidSetPinValue+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_u8PortID)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <DIO_voidSetPinValue+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_voidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_voidSetPinValue+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <DIO_voidSetPinValue+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <DIO_voidSetPinValue+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA_ID: SET_BIT(PORTA_REG, Copy_u8PinID); break;
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_voidSetPinValue+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_voidSetPinValue+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
			case PORTB_ID: SET_BIT(PORTB_REG, Copy_u8PinID); break;
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_voidSetPinValue+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_voidSetPinValue+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
			case PORTC_ID: SET_BIT(PORTC_REG, Copy_u8PinID); break;
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_voidSetPinValue+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_voidSetPinValue+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
			case PORTD_ID: SET_BIT(PORTD_REG, Copy_u8PinID); break;
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_voidSetPinValue+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_voidSetPinValue+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
		}
	}
	
	else if(Copy_u8PinValue == PIN_LOW)     
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_voidSetPinValue+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_u8PortID)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <DIO_voidSetPinValue+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_voidSetPinValue+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <DIO_voidSetPinValue+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <DIO_voidSetPinValue+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_voidSetPinValue+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <DIO_voidSetPinValue+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA_ID: CLR_BIT(PORTA_REG, Copy_u8PinID); break;
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_voidSetPinValue+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_voidSetPinValue+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <DIO_voidSetPinValue+0x1ee>
			case PORTB_ID: CLR_BIT(PORTB_REG, Copy_u8PinID); break;
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_voidSetPinValue+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_voidSetPinValue+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <DIO_voidSetPinValue+0x1ee>
			case PORTC_ID: CLR_BIT(PORTC_REG, Copy_u8PinID); break;
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_voidSetPinValue+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_voidSetPinValue+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <DIO_voidSetPinValue+0x1ee>
			case PORTD_ID: CLR_BIT(PORTD_REG, Copy_u8PinID); break;
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_voidSetPinValue+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_voidSetPinValue+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
		}
	}
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDir)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_voidSetPortDirection+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_voidSetPortDirection+0x8>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3c 83       	std	Y+4, r19	; 0x04
     f5e:	2b 83       	std	Y+3, r18	; 0x03
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	d1 f0       	breq	.+52     	; 0xf9e <DIO_voidSetPortDirection+0x58>
     f6a:	2b 81       	ldd	r18, Y+3	; 0x03
     f6c:	3c 81       	ldd	r19, Y+4	; 0x04
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	2c f4       	brge	.+10     	; 0xf7e <DIO_voidSetPortDirection+0x38>
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	61 f0       	breq	.+24     	; 0xf94 <DIO_voidSetPortDirection+0x4e>
     f7c:	1e c0       	rjmp	.+60     	; 0xfba <DIO_voidSetPortDirection+0x74>
     f7e:	2b 81       	ldd	r18, Y+3	; 0x03
     f80:	3c 81       	ldd	r19, Y+4	; 0x04
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	81 f0       	breq	.+32     	; 0xfa8 <DIO_voidSetPortDirection+0x62>
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	81 f0       	breq	.+32     	; 0xfb2 <DIO_voidSetPortDirection+0x6c>
     f92:	13 c0       	rjmp	.+38     	; 0xfba <DIO_voidSetPortDirection+0x74>
	{
		case PORTA_ID: DDRA_REG = Copy_u8PortDir; break;
     f94:	ea e3       	ldi	r30, 0x3A	; 58
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	80 83       	st	Z, r24
     f9c:	0e c0       	rjmp	.+28     	; 0xfba <DIO_voidSetPortDirection+0x74>
		case PORTB_ID: DDRB_REG = Copy_u8PortDir; break;
     f9e:	e7 e3       	ldi	r30, 0x37	; 55
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <DIO_voidSetPortDirection+0x74>
		case PORTC_ID: DDRC_REG = Copy_u8PortDir; break;
     fa8:	e4 e3       	ldi	r30, 0x34	; 52
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	80 83       	st	Z, r24
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <DIO_voidSetPortDirection+0x74>
		case PORTD_ID: DDRD_REG = Copy_u8PortDir; break;
     fb2:	e1 e3       	ldi	r30, 0x31	; 49
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	80 83       	st	Z, r24
	}
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_voidSetPortValue+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <DIO_voidSetPortValue+0x8>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3c 83       	std	Y+4, r19	; 0x04
     fe0:	2b 83       	std	Y+3, r18	; 0x03
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	d1 f0       	breq	.+52     	; 0x1020 <DIO_voidSetPortValue+0x58>
     fec:	2b 81       	ldd	r18, Y+3	; 0x03
     fee:	3c 81       	ldd	r19, Y+4	; 0x04
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <DIO_voidSetPortValue+0x38>
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 f0       	breq	.+24     	; 0x1016 <DIO_voidSetPortValue+0x4e>
     ffe:	1e c0       	rjmp	.+60     	; 0x103c <DIO_voidSetPortValue+0x74>
    1000:	2b 81       	ldd	r18, Y+3	; 0x03
    1002:	3c 81       	ldd	r19, Y+4	; 0x04
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	81 f0       	breq	.+32     	; 0x102a <DIO_voidSetPortValue+0x62>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	81 f0       	breq	.+32     	; 0x1034 <DIO_voidSetPortValue+0x6c>
    1014:	13 c0       	rjmp	.+38     	; 0x103c <DIO_voidSetPortValue+0x74>
	{
		case PORTA_ID: PORTA_REG = Copy_u8PortValue; break;
    1016:	eb e3       	ldi	r30, 0x3B	; 59
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	80 83       	st	Z, r24
    101e:	0e c0       	rjmp	.+28     	; 0x103c <DIO_voidSetPortValue+0x74>
		case PORTB_ID: PORTB_REG = Copy_u8PortValue; break;
    1020:	e8 e3       	ldi	r30, 0x38	; 56
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	80 83       	st	Z, r24
    1028:	09 c0       	rjmp	.+18     	; 0x103c <DIO_voidSetPortValue+0x74>
		case PORTC_ID: PORTC_REG = Copy_u8PortValue; break;
    102a:	e5 e3       	ldi	r30, 0x35	; 53
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	80 83       	st	Z, r24
    1032:	04 c0       	rjmp	.+8      	; 0x103c <DIO_voidSetPortValue+0x74>
		case PORTD_ID: PORTD_REG = Copy_u8PortValue; break;
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	80 83       	st	Z, r24
	}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <DIO_u8GetPinValue+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_u8GetPinValue+0x8>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_val;
	switch(Copy_u8PortID)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3d 83       	std	Y+5, r19	; 0x05
    1064:	2c 83       	std	Y+4, r18	; 0x04
    1066:	4c 81       	ldd	r20, Y+4	; 0x04
    1068:	5d 81       	ldd	r21, Y+5	; 0x05
    106a:	41 30       	cpi	r20, 0x01	; 1
    106c:	51 05       	cpc	r21, r1
    106e:	41 f1       	breq	.+80     	; 0x10c0 <DIO_u8GetPinValue+0x76>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	91 05       	cpc	r25, r1
    1078:	34 f4       	brge	.+12     	; 0x1086 <DIO_u8GetPinValue+0x3c>
    107a:	2c 81       	ldd	r18, Y+4	; 0x04
    107c:	3d 81       	ldd	r19, Y+5	; 0x05
    107e:	21 15       	cp	r18, r1
    1080:	31 05       	cpc	r19, r1
    1082:	61 f0       	breq	.+24     	; 0x109c <DIO_u8GetPinValue+0x52>
    1084:	52 c0       	rjmp	.+164    	; 0x112a <DIO_u8GetPinValue+0xe0>
    1086:	4c 81       	ldd	r20, Y+4	; 0x04
    1088:	5d 81       	ldd	r21, Y+5	; 0x05
    108a:	42 30       	cpi	r20, 0x02	; 2
    108c:	51 05       	cpc	r21, r1
    108e:	51 f1       	breq	.+84     	; 0x10e4 <DIO_u8GetPinValue+0x9a>
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	b9 f1       	breq	.+110    	; 0x1108 <DIO_u8GetPinValue+0xbe>
    109a:	47 c0       	rjmp	.+142    	; 0x112a <DIO_u8GetPinValue+0xe0>
	{
		case PORTA_ID: LOC_val = GET_BIT(PINA_REG, Copy_u8PinID); break;
    109c:	e9 e3       	ldi	r30, 0x39	; 57
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_u8GetPinValue+0x6a>
    10b0:	55 95       	asr	r21
    10b2:	47 95       	ror	r20
    10b4:	8a 95       	dec	r24
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_u8GetPinValue+0x66>
    10b8:	ca 01       	movw	r24, r20
    10ba:	81 70       	andi	r24, 0x01	; 1
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	35 c0       	rjmp	.+106    	; 0x112a <DIO_u8GetPinValue+0xe0>
		case PORTB_ID: LOC_val = GET_BIT(PINB_REG, Copy_u8PinID); break;
    10c0:	e6 e3       	ldi	r30, 0x36	; 54
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_u8GetPinValue+0x8e>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_u8GetPinValue+0x8a>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	23 c0       	rjmp	.+70     	; 0x112a <DIO_u8GetPinValue+0xe0>
		case PORTC_ID: LOC_val = GET_BIT(PINC_REG, Copy_u8PinID); break;
    10e4:	e3 e3       	ldi	r30, 0x33	; 51
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_u8GetPinValue+0xb2>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_u8GetPinValue+0xae>
    1100:	ca 01       	movw	r24, r20
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	11 c0       	rjmp	.+34     	; 0x112a <DIO_u8GetPinValue+0xe0>
		case PORTD_ID: LOC_val = GET_BIT(PIND_REG, Copy_u8PinID); break;
    1108:	e0 e3       	ldi	r30, 0x30	; 48
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_u8GetPinValue+0xd6>
    111c:	55 95       	asr	r21
    111e:	47 95       	ror	r20
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_u8GetPinValue+0xd2>
    1124:	ca 01       	movw	r24, r20
    1126:	81 70       	andi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_val;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_voidTogglePinValue>:


void DIO_voidTogglePinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_voidTogglePinValue+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_voidTogglePinValue+0x8>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3c 83       	std	Y+4, r19	; 0x04
    1154:	2b 83       	std	Y+3, r18	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	49 f1       	breq	.+82     	; 0x11b2 <DIO_voidTogglePinValue+0x76>
    1160:	2b 81       	ldd	r18, Y+3	; 0x03
    1162:	3c 81       	ldd	r19, Y+4	; 0x04
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	2c f4       	brge	.+10     	; 0x1174 <DIO_voidTogglePinValue+0x38>
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	61 f0       	breq	.+24     	; 0x118a <DIO_voidTogglePinValue+0x4e>
    1172:	5a c0       	rjmp	.+180    	; 0x1228 <DIO_voidTogglePinValue+0xec>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	71 f1       	breq	.+92     	; 0x11da <DIO_voidTogglePinValue+0x9e>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	e9 f1       	breq	.+122    	; 0x1202 <DIO_voidTogglePinValue+0xc6>
    1188:	4f c0       	rjmp	.+158    	; 0x1228 <DIO_voidTogglePinValue+0xec>
	{
		case PORTA_ID: TOGGLE_BIT(PORTA_REG, Copy_u8PinID); break;
    118a:	ab e3       	ldi	r26, 0x3B	; 59
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	eb e3       	ldi	r30, 0x3B	; 59
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_voidTogglePinValue+0x6c>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_voidTogglePinValue+0x68>
    11ac:	84 27       	eor	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	3b c0       	rjmp	.+118    	; 0x1228 <DIO_voidTogglePinValue+0xec>
		case PORTB_ID: TOGGLE_BIT(PORTB_REG, Copy_u8PinID); break;
    11b2:	a8 e3       	ldi	r26, 0x38	; 56
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e8 e3       	ldi	r30, 0x38	; 56
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_voidTogglePinValue+0x94>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_voidTogglePinValue+0x90>
    11d4:	84 27       	eor	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	27 c0       	rjmp	.+78     	; 0x1228 <DIO_voidTogglePinValue+0xec>
		case PORTC_ID: TOGGLE_BIT(PORTC_REG, Copy_u8PinID); break;
    11da:	a5 e3       	ldi	r26, 0x35	; 53
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_voidTogglePinValue+0xbc>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_voidTogglePinValue+0xb8>
    11fc:	84 27       	eor	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	13 c0       	rjmp	.+38     	; 0x1228 <DIO_voidTogglePinValue+0xec>
		case PORTD_ID: TOGGLE_BIT(PORTD_REG, Copy_u8PinID); break;
    1202:	a2 e3       	ldi	r26, 0x32	; 50
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e2 e3       	ldi	r30, 0x32	; 50
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_voidTogglePinValue+0xe4>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_voidTogglePinValue+0xe0>
    1224:	84 27       	eor	r24, r20
    1226:	8c 93       	st	X, r24
	}
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <KYP_voidInit>:
#include "KYP_Interface.h"
#include "KYP_Config.h"
#include "avr/delay.h"

void KYP_voidInit(void)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(KYP_PORT, IN_PIN4_TO_7);
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	6f e0       	ldi	r22, 0x0F	; 15
    1242:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(KYP_PORT, ALL_PORT_OUTPUT);         // inputs are pullup
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	6f ef       	ldi	r22, 0xFF	; 255
    124a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <DIO_voidSetPortValue>
}
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <KYP_u8GetPressedKey>:


u8 KYP_u8GetPressedKey(void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	a8 97       	sbiw	r28, 0x28	; 40
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_SWs[KYP_ROWS][KYP_COLS] = {{'7', '8', '9', '/'},
									  {'4', '5', '6', '*'},
									  {'1', '2', '3', '-'},
									  {'c', '0', '=', '+'}};
    1268:	ce 01       	movw	r24, r28
    126a:	43 96       	adiw	r24, 0x13	; 19
    126c:	9d a3       	std	Y+37, r25	; 0x25
    126e:	8c a3       	std	Y+36, r24	; 0x24
    1270:	e6 e9       	ldi	r30, 0x96	; 150
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	ff a3       	std	Y+39, r31	; 0x27
    1276:	ee a3       	std	Y+38, r30	; 0x26
    1278:	f0 e1       	ldi	r31, 0x10	; 16
    127a:	f8 a7       	std	Y+40, r31	; 0x28
    127c:	ee a1       	ldd	r30, Y+38	; 0x26
    127e:	ff a1       	ldd	r31, Y+39	; 0x27
    1280:	00 80       	ld	r0, Z
    1282:	8e a1       	ldd	r24, Y+38	; 0x26
    1284:	9f a1       	ldd	r25, Y+39	; 0x27
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	9f a3       	std	Y+39, r25	; 0x27
    128a:	8e a3       	std	Y+38, r24	; 0x26
    128c:	ec a1       	ldd	r30, Y+36	; 0x24
    128e:	fd a1       	ldd	r31, Y+37	; 0x25
    1290:	00 82       	st	Z, r0
    1292:	8c a1       	ldd	r24, Y+36	; 0x24
    1294:	9d a1       	ldd	r25, Y+37	; 0x25
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	9d a3       	std	Y+37, r25	; 0x25
    129a:	8c a3       	std	Y+36, r24	; 0x24
    129c:	98 a5       	ldd	r25, Y+40	; 0x28
    129e:	91 50       	subi	r25, 0x01	; 1
    12a0:	98 a7       	std	Y+40, r25	; 0x28
    12a2:	e8 a5       	ldd	r30, Y+40	; 0x28
    12a4:	ee 23       	and	r30, r30
    12a6:	51 f7       	brne	.-44     	; 0x127c <KYP_u8GetPressedKey+0x28>

	u8 LOC_PressedSwitch = ALL_NOT_PRESSED ;  // initial value out of range
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_CheckPress = SWITCH_NOT_PRESSED;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 8b       	std	Y+17, r24	; 0x11
	u8 LOC_ROW, LOC_COL;
	
	for(LOC_COL = COL_START; LOC_COL<=COL_END; LOC_COL++)
    12b0:	1f 86       	std	Y+15, r1	; 0x0f
    12b2:	b5 c0       	rjmp	.+362    	; 0x141e <KYP_u8GetPressedKey+0x1ca>
	{
		// Activate current column
		DIO_voidSetPinValue(KYP_PORT, LOC_COL, PIN_LOW);
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>

		for(LOC_ROW = ROW_START; LOC_ROW<=ROW_END; LOC_ROW++)
    12be:	84 e0       	ldi	r24, 0x04	; 4
    12c0:	88 8b       	std	Y+16, r24	; 0x10
    12c2:	a1 c0       	rjmp	.+322    	; 0x1406 <KYP_u8GetPressedKey+0x1b2>
		{
			LOC_CheckPress = DIO_u8GetPinValue(KYP_PORT, LOC_ROW);
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	68 89       	ldd	r22, Y+16	; 0x10
    12c8:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8GetPinValue>
    12cc:	89 8b       	std	Y+17, r24	; 0x11

			if(LOC_CheckPress == SWITCH_PRESSED)
    12ce:	89 89       	ldd	r24, Y+17	; 0x11
    12d0:	88 23       	and	r24, r24
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <KYP_u8GetPressedKey+0x82>
    12d4:	95 c0       	rjmp	.+298    	; 0x1400 <KYP_u8GetPressedKey+0x1ac>
			{
				LOC_PressedSwitch = LOC_SWs[LOC_ROW - ROW_START][LOC_COL - COL_START];
    12d6:	88 89       	ldd	r24, Y+16	; 0x10
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 01       	movw	r18, r24
    12de:	24 50       	subi	r18, 0x04	; 4
    12e0:	30 40       	sbci	r19, 0x00	; 0
    12e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e4:	48 2f       	mov	r20, r24
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	22 0f       	add	r18, r18
    12ea:	33 1f       	adc	r19, r19
    12ec:	22 0f       	add	r18, r18
    12ee:	33 1f       	adc	r19, r19
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	82 0f       	add	r24, r18
    12f6:	93 1f       	adc	r25, r19
    12f8:	84 0f       	add	r24, r20
    12fa:	95 1f       	adc	r25, r21
    12fc:	fc 01       	movw	r30, r24
    12fe:	72 96       	adiw	r30, 0x12	; 18
    1300:	80 81       	ld	r24, Z
    1302:	8a 8b       	std	Y+18, r24	; 0x12
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <KYP_u8GetPressedKey+0xbc>
				while(LOC_CheckPress == SWITCH_PRESSED)
				{
					LOC_CheckPress = DIO_u8GetPinValue(KYP_PORT, LOC_ROW);
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	68 89       	ldd	r22, Y+16	; 0x10
    130a:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8GetPinValue>
    130e:	89 8b       	std	Y+17, r24	; 0x11
			LOC_CheckPress = DIO_u8GetPinValue(KYP_PORT, LOC_ROW);

			if(LOC_CheckPress == SWITCH_PRESSED)
			{
				LOC_PressedSwitch = LOC_SWs[LOC_ROW - ROW_START][LOC_COL - COL_START];
				while(LOC_CheckPress == SWITCH_PRESSED)
    1310:	89 89       	ldd	r24, Y+17	; 0x11
    1312:	88 23       	and	r24, r24
    1314:	c1 f3       	breq	.-16     	; 0x1306 <KYP_u8GetPressedKey+0xb2>
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a8 e4       	ldi	r26, 0x48	; 72
    131c:	b2 e4       	ldi	r27, 0x42	; 66
    131e:	8b 87       	std	Y+11, r24	; 0x0b
    1320:	9c 87       	std	Y+12, r25	; 0x0c
    1322:	ad 87       	std	Y+13, r26	; 0x0d
    1324:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1326:	6b 85       	ldd	r22, Y+11	; 0x0b
    1328:	7c 85       	ldd	r23, Y+12	; 0x0c
    132a:	8d 85       	ldd	r24, Y+13	; 0x0d
    132c:	9e 85       	ldd	r25, Y+14	; 0x0e
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	4a ef       	ldi	r20, 0xFA	; 250
    1334:	54 e4       	ldi	r21, 0x44	; 68
    1336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	8f 83       	std	Y+7, r24	; 0x07
    1340:	98 87       	std	Y+8, r25	; 0x08
    1342:	a9 87       	std	Y+9, r26	; 0x09
    1344:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1346:	6f 81       	ldd	r22, Y+7	; 0x07
    1348:	78 85       	ldd	r23, Y+8	; 0x08
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a 85       	ldd	r25, Y+10	; 0x0a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e8       	ldi	r20, 0x80	; 128
    1354:	5f e3       	ldi	r21, 0x3F	; 63
    1356:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135a:	88 23       	and	r24, r24
    135c:	2c f4       	brge	.+10     	; 0x1368 <KYP_u8GetPressedKey+0x114>
		__ticks = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	3f c0       	rjmp	.+126    	; 0x13e6 <KYP_u8GetPressedKey+0x192>
	else if (__tmp > 65535)
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	78 85       	ldd	r23, Y+8	; 0x08
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	4f e7       	ldi	r20, 0x7F	; 127
    1376:	57 e4       	ldi	r21, 0x47	; 71
    1378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    137c:	18 16       	cp	r1, r24
    137e:	4c f5       	brge	.+82     	; 0x13d2 <KYP_u8GetPressedKey+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1380:	6b 85       	ldd	r22, Y+11	; 0x0b
    1382:	7c 85       	ldd	r23, Y+12	; 0x0c
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	9e 85       	ldd	r25, Y+14	; 0x0e
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e2       	ldi	r20, 0x20	; 32
    138e:	51 e4       	ldi	r21, 0x41	; 65
    1390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <KYP_u8GetPressedKey+0x174>
    13aa:	88 ec       	ldi	r24, 0xC8	; 200
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <KYP_u8GetPressedKey+0x162>
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	69 f7       	brne	.-38     	; 0x13aa <KYP_u8GetPressedKey+0x156>
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <KYP_u8GetPressedKey+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <KYP_u8GetPressedKey+0x19e>
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
				{
					LOC_CheckPress = DIO_u8GetPinValue(KYP_PORT, LOC_ROW);
				}
				_delay_ms(50);
				return LOC_PressedSwitch;
    13fa:	fa 89       	ldd	r31, Y+18	; 0x12
    13fc:	fb a3       	std	Y+35, r31	; 0x23
    13fe:	15 c0       	rjmp	.+42     	; 0x142a <KYP_u8GetPressedKey+0x1d6>
	for(LOC_COL = COL_START; LOC_COL<=COL_END; LOC_COL++)
	{
		// Activate current column
		DIO_voidSetPinValue(KYP_PORT, LOC_COL, PIN_LOW);

		for(LOC_ROW = ROW_START; LOC_ROW<=ROW_END; LOC_ROW++)
    1400:	88 89       	ldd	r24, Y+16	; 0x10
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	88 8b       	std	Y+16, r24	; 0x10
    1406:	88 89       	ldd	r24, Y+16	; 0x10
    1408:	88 30       	cpi	r24, 0x08	; 8
    140a:	08 f4       	brcc	.+2      	; 0x140e <KYP_u8GetPressedKey+0x1ba>
    140c:	5b cf       	rjmp	.-330    	; 0x12c4 <KYP_u8GetPressedKey+0x70>
				return LOC_PressedSwitch;
			}
		}

		// Deactivate current column
		DIO_voidSetPinValue(KYP_PORT, LOC_COL, PIN_HIGH);
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	6f 85       	ldd	r22, Y+15	; 0x0f
    1412:	41 e0       	ldi	r20, 0x01	; 1
    1414:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>

	u8 LOC_PressedSwitch = ALL_NOT_PRESSED ;  // initial value out of range
	u8 LOC_CheckPress = SWITCH_NOT_PRESSED;
	u8 LOC_ROW, LOC_COL;
	
	for(LOC_COL = COL_START; LOC_COL<=COL_END; LOC_COL++)
    1418:	8f 85       	ldd	r24, Y+15	; 0x0f
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	8f 87       	std	Y+15, r24	; 0x0f
    141e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	08 f4       	brcc	.+2      	; 0x1426 <KYP_u8GetPressedKey+0x1d2>
    1424:	47 cf       	rjmp	.-370    	; 0x12b4 <KYP_u8GetPressedKey+0x60>
		}

		// Deactivate current column
		DIO_voidSetPinValue(KYP_PORT, LOC_COL, PIN_HIGH);
	}
	return LOC_PressedSwitch;
    1426:	8a 89       	ldd	r24, Y+18	; 0x12
    1428:	8b a3       	std	Y+35, r24	; 0x23
    142a:	8b a1       	ldd	r24, Y+35	; 0x23
}
    142c:	a8 96       	adiw	r28, 0x28	; 40
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <LCD_voidSendCMD>:
#include "DIO_interface.h"
#include "LCD_Interface.h"
#include "LCD_Config.h"

void LCD_voidSendCMD(u8 Copy_u8CMD)   // can be static function (not used outside this file)
{	
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	2f 97       	sbiw	r28, 0x0f	; 15
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_PORT_CONTROL, RS_PIN, PIN_LOW);   // RS = 0
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT_CONTROL, RW_PIN, PIN_LOW);   // RW = 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_PORT_DATA, Copy_u8CMD);    // Write command to port B
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	6f 85       	ldd	r22, Y+15	; 0x0f
    146c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <DIO_voidSetPortValue>
	
	// Enable pulse high for 2 sec
	DIO_voidSetPinValue(LCD_PORT_CONTROL, EN_PIN, PIN_HIGH);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	62 e0       	ldi	r22, 0x02	; 2
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e4       	ldi	r27, 0x40	; 64
    1482:	8b 87       	std	Y+11, r24	; 0x0b
    1484:	9c 87       	std	Y+12, r25	; 0x0c
    1486:	ad 87       	std	Y+13, r26	; 0x0d
    1488:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148a:	6b 85       	ldd	r22, Y+11	; 0x0b
    148c:	7c 85       	ldd	r23, Y+12	; 0x0c
    148e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1490:	9e 85       	ldd	r25, Y+14	; 0x0e
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	4a ef       	ldi	r20, 0xFA	; 250
    1498:	54 e4       	ldi	r21, 0x44	; 68
    149a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	8f 83       	std	Y+7, r24	; 0x07
    14a4:	98 87       	std	Y+8, r25	; 0x08
    14a6:	a9 87       	std	Y+9, r26	; 0x09
    14a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14aa:	6f 81       	ldd	r22, Y+7	; 0x07
    14ac:	78 85       	ldd	r23, Y+8	; 0x08
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e8       	ldi	r20, 0x80	; 128
    14b8:	5f e3       	ldi	r21, 0x3F	; 63
    14ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14be:	88 23       	and	r24, r24
    14c0:	2c f4       	brge	.+10     	; 0x14cc <LCD_voidSendCMD+0x8e>
		__ticks = 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	3f c0       	rjmp	.+126    	; 0x154a <LCD_voidSendCMD+0x10c>
	else if (__tmp > 65535)
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	3f ef       	ldi	r19, 0xFF	; 255
    14d8:	4f e7       	ldi	r20, 0x7F	; 127
    14da:	57 e4       	ldi	r21, 0x47	; 71
    14dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e0:	18 16       	cp	r1, r24
    14e2:	4c f5       	brge	.+82     	; 0x1536 <LCD_voidSendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e2       	ldi	r20, 0x20	; 32
    14f2:	51 e4       	ldi	r21, 0x41	; 65
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	0f c0       	rjmp	.+30     	; 0x152c <LCD_voidSendCMD+0xee>
    150e:	88 ec       	ldi	r24, 0xC8	; 200
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <LCD_voidSendCMD+0xdc>
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	69 f7       	brne	.-38     	; 0x150e <LCD_voidSendCMD+0xd0>
    1534:	14 c0       	rjmp	.+40     	; 0x155e <LCD_voidSendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1536:	6f 81       	ldd	r22, Y+7	; 0x07
    1538:	78 85       	ldd	r23, Y+8	; 0x08
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9e 83       	std	Y+6, r25	; 0x06
    1548:	8d 83       	std	Y+5, r24	; 0x05
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <LCD_voidSendCMD+0x118>
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_PORT_CONTROL, EN_PIN, PIN_LOW);
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	62 e0       	ldi	r22, 0x02	; 2
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
}
    1568:	2f 96       	adiw	r28, 0x0f	; 15
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <LCD_voidDisplayData>:


void LCD_voidDisplayData(u8 Copy_u8Data)
{	
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	2f 97       	sbiw	r28, 0x0f	; 15
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_PORT_CONTROL, RS_PIN, PIN_HIGH);    // RS = 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT_CONTROL, RW_PIN, PIN_LOW);     // RW = 1
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_PORT_DATA, Copy_u8Data);           // Write data to port B
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    15a8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <DIO_voidSetPortValue>
	
	// Enable pulse
	DIO_voidSetPinValue(LCD_PORT_CONTROL, EN_PIN, PIN_HIGH);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	62 e0       	ldi	r22, 0x02	; 2
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e4       	ldi	r27, 0x40	; 64
    15be:	8b 87       	std	Y+11, r24	; 0x0b
    15c0:	9c 87       	std	Y+12, r25	; 0x0c
    15c2:	ad 87       	std	Y+13, r26	; 0x0d
    15c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    15cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8f 83       	std	Y+7, r24	; 0x07
    15e0:	98 87       	std	Y+8, r25	; 0x08
    15e2:	a9 87       	std	Y+9, r26	; 0x09
    15e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <LCD_voidDisplayData+0x8e>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <LCD_voidDisplayData+0x10c>
	else if (__tmp > 65535)
    1608:	6f 81       	ldd	r22, Y+7	; 0x07
    160a:	78 85       	ldd	r23, Y+8	; 0x08
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <LCD_voidDisplayData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6b 85       	ldd	r22, Y+11	; 0x0b
    1622:	7c 85       	ldd	r23, Y+12	; 0x0c
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	9e 85       	ldd	r25, Y+14	; 0x0e
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <LCD_voidDisplayData+0xee>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_voidDisplayData+0xdc>
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <LCD_voidDisplayData+0xd0>
    1670:	14 c0       	rjmp	.+40     	; 0x169a <LCD_voidDisplayData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_voidDisplayData+0x118>
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_PORT_CONTROL, EN_PIN, PIN_LOW);
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
}
    16a4:	2f 96       	adiw	r28, 0x0f	; 15
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_voidInit>:


void LCD_voidInit(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	aa 97       	sbiw	r28, 0x2a	; 42
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
	// Set RS, RW, EN directions
	DIO_voidSetPinDirection(LCD_PORT_CONTROL, RS_PIN, PIN_OUTPUT);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PORT_CONTROL, RW_PIN, PIN_OUTPUT);
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PORT_CONTROL, EN_PIN, PIN_OUTPUT);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>

	// Set data pins directions
	DIO_voidSetPortDirection(LCD_PORT_DATA, ALL_PORT_OUTPUT);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	6f ef       	ldi	r22, 0xFF	; 255
    16ec:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPortDirection>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 ef       	ldi	r26, 0xF0	; 240
    16f6:	b1 e4       	ldi	r27, 0x41	; 65
    16f8:	8f a3       	std	Y+39, r24	; 0x27
    16fa:	98 a7       	std	Y+40, r25	; 0x28
    16fc:	a9 a7       	std	Y+41, r26	; 0x29
    16fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	6f a1       	ldd	r22, Y+39	; 0x27
    1702:	78 a5       	ldd	r23, Y+40	; 0x28
    1704:	89 a5       	ldd	r24, Y+41	; 0x29
    1706:	9a a5       	ldd	r25, Y+42	; 0x2a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a ef       	ldi	r20, 0xFA	; 250
    170e:	54 e4       	ldi	r21, 0x44	; 68
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8b a3       	std	Y+35, r24	; 0x23
    171a:	9c a3       	std	Y+36, r25	; 0x24
    171c:	ad a3       	std	Y+37, r26	; 0x25
    171e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1720:	6b a1       	ldd	r22, Y+35	; 0x23
    1722:	7c a1       	ldd	r23, Y+36	; 0x24
    1724:	8d a1       	ldd	r24, Y+37	; 0x25
    1726:	9e a1       	ldd	r25, Y+38	; 0x26
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <LCD_voidInit+0x8c>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9a a3       	std	Y+34, r25	; 0x22
    173e:	89 a3       	std	Y+33, r24	; 0x21
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1742:	6b a1       	ldd	r22, Y+35	; 0x23
    1744:	7c a1       	ldd	r23, Y+36	; 0x24
    1746:	8d a1       	ldd	r24, Y+37	; 0x25
    1748:	9e a1       	ldd	r25, Y+38	; 0x26
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	6f a1       	ldd	r22, Y+39	; 0x27
    175c:	78 a5       	ldd	r23, Y+40	; 0x28
    175e:	89 a5       	ldd	r24, Y+41	; 0x29
    1760:	9a a5       	ldd	r25, Y+42	; 0x2a
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9a a3       	std	Y+34, r25	; 0x22
    1780:	89 a3       	std	Y+33, r24	; 0x21
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <LCD_voidInit+0xec>
    1784:	88 ec       	ldi	r24, 0xC8	; 200
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	98 a3       	std	Y+32, r25	; 0x20
    178a:	8f 8f       	std	Y+31, r24	; 0x1f
    178c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    178e:	98 a1       	ldd	r25, Y+32	; 0x20
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCD_voidInit+0xda>
    1794:	98 a3       	std	Y+32, r25	; 0x20
    1796:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	89 a1       	ldd	r24, Y+33	; 0x21
    179a:	9a a1       	ldd	r25, Y+34	; 0x22
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9a a3       	std	Y+34, r25	; 0x22
    17a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	89 a1       	ldd	r24, Y+33	; 0x21
    17a4:	9a a1       	ldd	r25, Y+34	; 0x22
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <LCD_voidInit+0xce>
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	6b a1       	ldd	r22, Y+35	; 0x23
    17ae:	7c a1       	ldd	r23, Y+36	; 0x24
    17b0:	8d a1       	ldd	r24, Y+37	; 0x25
    17b2:	9e a1       	ldd	r25, Y+38	; 0x26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9a a3       	std	Y+34, r25	; 0x22
    17be:	89 a3       	std	Y+33, r24	; 0x21
    17c0:	89 a1       	ldd	r24, Y+33	; 0x21
    17c2:	9a a1       	ldd	r25, Y+34	; 0x22
    17c4:	9e 8f       	std	Y+30, r25	; 0x1e
    17c6:	8d 8f       	std	Y+29, r24	; 0x1d
    17c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_voidInit+0x116>
    17d0:	9e 8f       	std	Y+30, r25	; 0x1e
    17d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	// Function set
	LCD_voidSendCMD(0b00111000);
    17d4:	88 e3       	ldi	r24, 0x38	; 56
    17d6:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_voidSendCMD>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e4       	ldi	r27, 0x40	; 64
    17e2:	89 8f       	std	Y+25, r24	; 0x19
    17e4:	9a 8f       	std	Y+26, r25	; 0x1a
    17e6:	ab 8f       	std	Y+27, r26	; 0x1b
    17e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	69 8d       	ldd	r22, Y+25	; 0x19
    17ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8d 8b       	std	Y+21, r24	; 0x15
    1804:	9e 8b       	std	Y+22, r25	; 0x16
    1806:	af 8b       	std	Y+23, r26	; 0x17
    1808:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    180a:	6d 89       	ldd	r22, Y+21	; 0x15
    180c:	7e 89       	ldd	r23, Y+22	; 0x16
    180e:	8f 89       	ldd	r24, Y+23	; 0x17
    1810:	98 8d       	ldd	r25, Y+24	; 0x18
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <LCD_voidInit+0x176>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9c 8b       	std	Y+20, r25	; 0x14
    1828:	8b 8b       	std	Y+19, r24	; 0x13
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    182c:	6d 89       	ldd	r22, Y+21	; 0x15
    182e:	7e 89       	ldd	r23, Y+22	; 0x16
    1830:	8f 89       	ldd	r24, Y+23	; 0x17
    1832:	98 8d       	ldd	r25, Y+24	; 0x18
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	69 8d       	ldd	r22, Y+25	; 0x19
    1846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    184a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9c 8b       	std	Y+20, r25	; 0x14
    186a:	8b 8b       	std	Y+19, r24	; 0x13
    186c:	0f c0       	rjmp	.+30     	; 0x188c <LCD_voidInit+0x1d6>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9a 8b       	std	Y+18, r25	; 0x12
    1874:	89 8b       	std	Y+17, r24	; 0x11
    1876:	89 89       	ldd	r24, Y+17	; 0x11
    1878:	9a 89       	ldd	r25, Y+18	; 0x12
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_voidInit+0x1c4>
    187e:	9a 8b       	std	Y+18, r25	; 0x12
    1880:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8b 89       	ldd	r24, Y+19	; 0x13
    1884:	9c 89       	ldd	r25, Y+20	; 0x14
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8b 89       	ldd	r24, Y+19	; 0x13
    188e:	9c 89       	ldd	r25, Y+20	; 0x14
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <LCD_voidInit+0x1b8>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6d 89       	ldd	r22, Y+21	; 0x15
    1898:	7e 89       	ldd	r23, Y+22	; 0x16
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	98 8b       	std	Y+16, r25	; 0x10
    18b0:	8f 87       	std	Y+15, r24	; 0x0f
    18b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b4:	98 89       	ldd	r25, Y+16	; 0x10
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCD_voidInit+0x200>
    18ba:	98 8b       	std	Y+16, r25	; 0x10
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Display ON/OFF control
	LCD_voidSendCMD(0b00001100);
    18be:	8c e0       	ldi	r24, 0x0C	; 12
    18c0:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_voidSendCMD>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b0 e4       	ldi	r27, 0x40	; 64
    18cc:	8b 87       	std	Y+11, r24	; 0x0b
    18ce:	9c 87       	std	Y+12, r25	; 0x0c
    18d0:	ad 87       	std	Y+13, r26	; 0x0d
    18d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18da:	9e 85       	ldd	r25, Y+14	; 0x0e
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a ef       	ldi	r20, 0xFA	; 250
    18e2:	54 e4       	ldi	r21, 0x44	; 68
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8f 83       	std	Y+7, r24	; 0x07
    18ee:	98 87       	std	Y+8, r25	; 0x08
    18f0:	a9 87       	std	Y+9, r26	; 0x09
    18f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f4:	6f 81       	ldd	r22, Y+7	; 0x07
    18f6:	78 85       	ldd	r23, Y+8	; 0x08
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <LCD_voidInit+0x260>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1930:	7c 85       	ldd	r23, Y+12	; 0x0c
    1932:	8d 85       	ldd	r24, Y+13	; 0x0d
    1934:	9e 85       	ldd	r25, Y+14	; 0x0e
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <LCD_voidInit+0x2c0>
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCD_voidInit+0x2ae>
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <LCD_voidInit+0x2a2>
    197e:	14 c0       	rjmp	.+40     	; 0x19a8 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_voidInit+0x2ea>
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	// clear
	LCD_voidSendCMD(CMD_CLEAR);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_voidSendCMD>
}
    19ae:	aa 96       	adiw	r28, 0x2a	; 42
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <LCD_voidGoToRowCol>:


// Start from specific location
void LCD_voidGoToRowCol(u8 Copy_u8Row, u8 Copy_u8Col)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <LCD_voidGoToRowCol+0x6>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_Default = 0x80;
    19d0:	80 e8       	ldi	r24, 0x80	; 128
    19d2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Row == 0)
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	88 23       	and	r24, r24
    19d8:	29 f4       	brne	.+10     	; 0x19e4 <LCD_voidGoToRowCol+0x24>
	{
		LOC_Default = LOC_Default + Copy_u8Col;
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	89 0f       	add	r24, r25
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	08 c0       	rjmp	.+16     	; 0x19f4 <LCD_voidGoToRowCol+0x34>
	}

	else if(Copy_u8Row == 1)
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <LCD_voidGoToRowCol+0x34>
	{
		LOC_Default = LOC_Default + 0x40 + Copy_u8Col;
    19ea:	99 81       	ldd	r25, Y+1	; 0x01
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	89 0f       	add	r24, r25
    19f0:	80 5c       	subi	r24, 0xC0	; 192
    19f2:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidSendCMD(LOC_Default);
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_voidSendCMD>
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <LCD_voidDisplayString>:



// print string as separated characters
void LCD_voidDisplayString(u8 Copy_u8String[])
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <LCD_voidDisplayString+0x6>
    1a0c:	0f 92       	push	r0
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	9b 83       	std	Y+3, r25	; 0x03
    1a14:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1a16:	19 82       	std	Y+1, r1	; 0x01
    1a18:	0e c0       	rjmp	.+28     	; 0x1a36 <LCD_voidDisplayString+0x30>
	while(Copy_u8String[i] != '\0' && i<16)
	{
		LCD_voidDisplayData(Copy_u8String[i]);
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	fc 01       	movw	r30, r24
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	80 81       	ld	r24, Z
    1a2c:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidDisplayData>
		i++;
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	89 83       	std	Y+1, r24	; 0x01

// print string as separated characters
void LCD_voidDisplayString(u8 Copy_u8String[])
{
	u8 i = 0;
	while(Copy_u8String[i] != '\0' && i<16)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a40:	fc 01       	movw	r30, r24
    1a42:	e2 0f       	add	r30, r18
    1a44:	f3 1f       	adc	r31, r19
    1a46:	80 81       	ld	r24, Z
    1a48:	88 23       	and	r24, r24
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <LCD_voidDisplayString+0x4c>
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	80 31       	cpi	r24, 0x10	; 16
    1a50:	20 f3       	brcs	.-56     	; 0x1a1a <LCD_voidDisplayString+0x14>
		LCD_voidDisplayData(Copy_u8String[i]);
		i++;
	}

	// print in other row in case of overflow
	if(i>=16)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	80 31       	cpi	r24, 0x10	; 16
    1a56:	f0 f0       	brcs	.+60     	; 0x1a94 <LCD_voidDisplayString+0x8e>
	{
		LCD_voidGoToRowCol(1, 0);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidGoToRowCol>
    1a60:	0e c0       	rjmp	.+28     	; 0x1a7e <LCD_voidDisplayString+0x78>
		while(Copy_u8String[i] != '\0')
		{
			LCD_voidDisplayData(Copy_u8String[i]);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	e2 0f       	add	r30, r18
    1a70:	f3 1f       	adc	r31, r19
    1a72:	80 81       	ld	r24, Z
    1a74:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidDisplayData>
			i++;
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	8f 5f       	subi	r24, 0xFF	; 255
    1a7c:	89 83       	std	Y+1, r24	; 0x01

	// print in other row in case of overflow
	if(i>=16)
	{
		LCD_voidGoToRowCol(1, 0);
		while(Copy_u8String[i] != '\0')
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	9b 81       	ldd	r25, Y+3	; 0x03
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e2 0f       	add	r30, r18
    1a8c:	f3 1f       	adc	r31, r19
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 23       	and	r24, r24
    1a92:	39 f7       	brne	.-50     	; 0x1a62 <LCD_voidDisplayString+0x5c>
		{
			LCD_voidDisplayData(Copy_u8String[i]);
			i++;
		}
	}
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <LCD_voidDisplayDigits>:



// split number into separate digits then display these digits
void LCD_voidDisplayDigits(u32 Copy_u32Num)
{
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	65 97       	sbiw	r28, 0x15	; 21
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	6a 8b       	std	Y+18, r22	; 0x12
    1aba:	7b 8b       	std	Y+19, r23	; 0x13
    1abc:	8c 8b       	std	Y+20, r24	; 0x14
    1abe:	9d 8b       	std	Y+21, r25	; 0x15
	u8 size=0, i, c;
    1ac0:	1f 82       	std	Y+7, r1	; 0x07
	u8 arr[10];
	u32 temp = Copy_u32Num;
    1ac2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ac6:	ac 89       	ldd	r26, Y+20	; 0x14
    1ac8:	bd 89       	ldd	r27, Y+21	; 0x15
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	ab 83       	std	Y+3, r26	; 0x03
    1ad0:	bc 83       	std	Y+4, r27	; 0x04
    1ad2:	15 c0       	rjmp	.+42     	; 0x1afe <LCD_voidDisplayDigits+0x5e>
	while(temp)
	{
		size++;
    1ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
    1ad8:	8f 83       	std	Y+7, r24	; 0x07
		temp /= 10;
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ade:	ab 81       	ldd	r26, Y+3	; 0x03
    1ae0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ae2:	2a e0       	ldi	r18, 0x0A	; 10
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 b4 11 	call	0x2368	; 0x2368 <__udivmodsi4>
    1af2:	da 01       	movw	r26, r20
    1af4:	c9 01       	movw	r24, r18
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	ab 83       	std	Y+3, r26	; 0x03
    1afc:	bc 83       	std	Y+4, r27	; 0x04
void LCD_voidDisplayDigits(u32 Copy_u32Num)
{
	u8 size=0, i, c;
	u8 arr[10];
	u32 temp = Copy_u32Num;
	while(temp)
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	ab 81       	ldd	r26, Y+3	; 0x03
    1b04:	bc 81       	ldd	r27, Y+4	; 0x04
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	a1 05       	cpc	r26, r1
    1b0a:	b1 05       	cpc	r27, r1
    1b0c:	19 f7       	brne	.-58     	; 0x1ad4 <LCD_voidDisplayDigits+0x34>
	{
		size++;
		temp /= 10;
	}

	i = size-1;
    1b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b10:	81 50       	subi	r24, 0x01	; 1
    1b12:	8e 83       	std	Y+6, r24	; 0x06
    1b14:	2d c0       	rjmp	.+90     	; 0x1b70 <LCD_voidDisplayDigits+0xd0>
	while(Copy_u32Num)
	{
		arr[i] = Copy_u32Num % 10;
    1b16:	8e 81       	ldd	r24, Y+6	; 0x06
    1b18:	08 2f       	mov	r16, r24
    1b1a:	10 e0       	ldi	r17, 0x00	; 0
    1b1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b1e:	9b 89       	ldd	r25, Y+19	; 0x13
    1b20:	ac 89       	ldd	r26, Y+20	; 0x14
    1b22:	bd 89       	ldd	r27, Y+21	; 0x15
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 b4 11 	call	0x2368	; 0x2368 <__udivmodsi4>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	28 2f       	mov	r18, r24
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	08 96       	adiw	r24, 0x08	; 8
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e0 0f       	add	r30, r16
    1b42:	f1 1f       	adc	r31, r17
    1b44:	20 83       	st	Z, r18
		Copy_u32Num /= 10;
    1b46:	8a 89       	ldd	r24, Y+18	; 0x12
    1b48:	9b 89       	ldd	r25, Y+19	; 0x13
    1b4a:	ac 89       	ldd	r26, Y+20	; 0x14
    1b4c:	bd 89       	ldd	r27, Y+21	; 0x15
    1b4e:	2a e0       	ldi	r18, 0x0A	; 10
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 b4 11 	call	0x2368	; 0x2368 <__udivmodsi4>
    1b5e:	da 01       	movw	r26, r20
    1b60:	c9 01       	movw	r24, r18
    1b62:	8a 8b       	std	Y+18, r24	; 0x12
    1b64:	9b 8b       	std	Y+19, r25	; 0x13
    1b66:	ac 8b       	std	Y+20, r26	; 0x14
    1b68:	bd 8b       	std	Y+21, r27	; 0x15
		i--;
    1b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6c:	81 50       	subi	r24, 0x01	; 1
    1b6e:	8e 83       	std	Y+6, r24	; 0x06
		size++;
		temp /= 10;
	}

	i = size-1;
	while(Copy_u32Num)
    1b70:	8a 89       	ldd	r24, Y+18	; 0x12
    1b72:	9b 89       	ldd	r25, Y+19	; 0x13
    1b74:	ac 89       	ldd	r26, Y+20	; 0x14
    1b76:	bd 89       	ldd	r27, Y+21	; 0x15
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	a1 05       	cpc	r26, r1
    1b7c:	b1 05       	cpc	r27, r1
    1b7e:	59 f6       	brne	.-106    	; 0x1b16 <LCD_voidDisplayDigits+0x76>
		arr[i] = Copy_u32Num % 10;
		Copy_u32Num /= 10;
		i--;
	}

	for(c = 0; c < size; c++)
    1b80:	1d 82       	std	Y+5, r1	; 0x05
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_voidDisplayDigits+0x102>
	{
		LCD_voidDisplayData(arr[c] + 48);
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	08 96       	adiw	r24, 0x08	; 8
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	80 81       	ld	r24, Z
    1b96:	80 5d       	subi	r24, 0xD0	; 208
    1b98:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidDisplayData>
		arr[i] = Copy_u32Num % 10;
		Copy_u32Num /= 10;
		i--;
	}

	for(c = 0; c < size; c++)
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba6:	98 17       	cp	r25, r24
    1ba8:	68 f3       	brcs	.-38     	; 0x1b84 <LCD_voidDisplayDigits+0xe4>
	{
		LCD_voidDisplayData(arr[c] + 48);
	}
}
    1baa:	65 96       	adiw	r28, 0x15	; 21
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <LCD_voidDisplaySpecialChar>:



// input: pattern array from main, pattern num
void LCD_voidDisplaySpecialChar(u8 Ptr_u8Pattern[],u8 Copy_u8PatternNum)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <LCD_voidDisplaySpecialChar+0x6>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <LCD_voidDisplaySpecialChar+0x8>
    1bc8:	0f 92       	push	r0
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9c 83       	std	Y+4, r25	; 0x04
    1bd0:	8b 83       	std	Y+3, r24	; 0x03
    1bd2:	6d 83       	std	Y+5, r22	; 0x05
	u8 Loc_CGRAM = 64 + Copy_u8PatternNum*8;
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	08 96       	adiw	r24, 0x08	; 8
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCMD(Loc_CGRAM);
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_voidSendCMD>

	for(u8 i = 0; i < 8 ;i++)
    1bf0:	19 82       	std	Y+1, r1	; 0x01
    1bf2:	0e c0       	rjmp	.+28     	; 0x1c10 <LCD_voidDisplaySpecialChar+0x50>
	{
		LCD_voidDisplayData(Ptr_u8Pattern[i]);
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	fc 01       	movw	r30, r24
    1c00:	e2 0f       	add	r30, r18
    1c02:	f3 1f       	adc	r31, r19
    1c04:	80 81       	ld	r24, Z
    1c06:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidDisplayData>
void LCD_voidDisplaySpecialChar(u8 Ptr_u8Pattern[],u8 Copy_u8PatternNum)
{
	u8 Loc_CGRAM = 64 + Copy_u8PatternNum*8;
	LCD_voidSendCMD(Loc_CGRAM);

	for(u8 i = 0; i < 8 ;i++)
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	88 30       	cpi	r24, 0x08	; 8
    1c14:	78 f3       	brcs	.-34     	; 0x1bf4 <LCD_voidDisplaySpecialChar+0x34>
	{
		LCD_voidDisplayData(Ptr_u8Pattern[i]);
	}
	LCD_voidDisplayData(Copy_u8PatternNum);
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidDisplayData>
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <LCD_voidClear>:


void LCD_voidClear()
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCMD(CMD_CLEAR);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_voidSendCMD>
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <TMR1_voidInit>:
#include "TMR1_Private.h"
#include "TMR1_Config.h"
#include "TMR1_Interface.h"

void TMR1_voidInit()
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, WGM13_BIT);
	// Overflow interrupt enable
	SET_BIT(TIMSk, 2);

#elif MODE == FAST_PWM
	CLR_BIT(TCCR1A, WGM10_BIT);
    1c48:	af e4       	ldi	r26, 0x4F	; 79
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ef e4       	ldi	r30, 0x4F	; 79
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8e 7f       	andi	r24, 0xFE	; 254
    1c54:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11_BIT);
    1c56:	af e4       	ldi	r26, 0x4F	; 79
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ef e4       	ldi	r30, 0x4F	; 79
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	82 60       	ori	r24, 0x02	; 2
    1c62:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12_BIT);
    1c64:	ae e4       	ldi	r26, 0x4E	; 78
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	ee e4       	ldi	r30, 0x4E	; 78
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 60       	ori	r24, 0x08	; 8
    1c70:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13_BIT);
    1c72:	ae e4       	ldi	r26, 0x4E	; 78
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ee e4       	ldi	r30, 0x4E	; 78
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 61       	ori	r24, 0x10	; 16
    1c7e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13_BIT);

#endif

	// Non inverting
	SET_BIT(TCCR1A, COM1A1_BIT);
    1c80:	af e4       	ldi	r26, 0x4F	; 79
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ef e4       	ldi	r30, 0x4F	; 79
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 68       	ori	r24, 0x80	; 128
    1c8c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1_BIT);
    1c8e:	af e4       	ldi	r26, 0x4F	; 79
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ef e4       	ldi	r30, 0x4F	; 79
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 62       	ori	r24, 0x20	; 32
    1c9a:	8c 93       	st	X, r24
	
	CLR_BIT(TCCR1A, COM1A0_BIT);
    1c9c:	af e4       	ldi	r26, 0x4F	; 79
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	ef e4       	ldi	r30, 0x4F	; 79
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8f 7b       	andi	r24, 0xBF	; 191
    1ca8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0_BIT);
    1caa:	af e4       	ldi	r26, 0x4F	; 79
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ef e4       	ldi	r30, 0x4F	; 79
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8f 7e       	andi	r24, 0xEF	; 239
    1cb6:	8c 93       	st	X, r24
	
	// Select prescalar (/8)
	CLR_BIT(TCCR1B, CS10_BIT);
    1cb8:	ae e4       	ldi	r26, 0x4E	; 78
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	ee e4       	ldi	r30, 0x4E	; 78
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	8e 7f       	andi	r24, 0xFE	; 254
    1cc4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11_BIT);
    1cc6:	ae e4       	ldi	r26, 0x4E	; 78
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ee e4       	ldi	r30, 0x4E	; 78
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	82 60       	ori	r24, 0x02	; 2
    1cd2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12_BIT);
    1cd4:	ae e4       	ldi	r26, 0x4E	; 78
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	ee e4       	ldi	r30, 0x4E	; 78
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8b 7f       	andi	r24, 0xFB	; 251
    1ce0:	8c 93       	st	X, r24
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <TMR1_voidInitICU>:


void TMR1_voidInitICU()
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A, WGM10_BIT);
    1cf0:	af e4       	ldi	r26, 0x4F	; 79
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	ef e4       	ldi	r30, 0x4F	; 79
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8e 7f       	andi	r24, 0xFE	; 254
    1cfc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11_BIT);
    1cfe:	af e4       	ldi	r26, 0x4F	; 79
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	ef e4       	ldi	r30, 0x4F	; 79
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	8d 7f       	andi	r24, 0xFD	; 253
    1d0a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12_BIT);
    1d0c:	ae e4       	ldi	r26, 0x4E	; 78
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	ee e4       	ldi	r30, 0x4E	; 78
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	87 7f       	andi	r24, 0xF7	; 247
    1d18:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13_BIT);
    1d1a:	ae e4       	ldi	r26, 0x4E	; 78
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	ee e4       	ldi	r30, 0x4E	; 78
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 7e       	andi	r24, 0xEF	; 239
    1d26:	8c 93       	st	X, r24
	// input capture interrupt enable
	SET_BIT(TIMSk, 5);
    1d28:	a9 e5       	ldi	r26, 0x59	; 89
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e9 e5       	ldi	r30, 0x59	; 89
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 62       	ori	r24, 0x20	; 32
    1d34:	8c 93       	st	X, r24

	// Select prescalar (/8)
	CLR_BIT(TCCR1B, CS10_BIT);
    1d36:	ae e4       	ldi	r26, 0x4E	; 78
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ee e4       	ldi	r30, 0x4E	; 78
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8e 7f       	andi	r24, 0xFE	; 254
    1d42:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11_BIT);
    1d44:	ae e4       	ldi	r26, 0x4E	; 78
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ee e4       	ldi	r30, 0x4E	; 78
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	82 60       	ori	r24, 0x02	; 2
    1d50:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12_BIT);
    1d52:	ae e4       	ldi	r26, 0x4E	; 78
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ee e4       	ldi	r30, 0x4E	; 78
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8b 7f       	andi	r24, 0xFB	; 251
    1d5e:	8c 93       	st	X, r24
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <TMR1_voidLoadCounterTop>:

void TMR1_voidLoadCounterTop(u16 copy_u8CounterTop)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <TMR1_voidLoadCounterTop+0x6>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = copy_u8CounterTop;
    1d74:	e6 e4       	ldi	r30, 0x46	; 70
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <TMR1_voidLoadOCR1A>:


void TMR1_voidLoadOCR1A(u16 copy_u8OCRValue)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <TMR1_voidLoadOCR1A+0x6>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8OCRValue;
    1d98:	ea e4       	ldi	r30, 0x4A	; 74
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <TMR1_voidICedgeSelect>:


void TMR1_voidICedgeSelect(u8 edge)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <TMR1_voidICedgeSelect+0x6>
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
	switch (edge)
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	3b 83       	std	Y+3, r19	; 0x03
    1dc4:	2a 83       	std	Y+2, r18	; 0x02
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	91 05       	cpc	r25, r1
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <TMR1_voidICedgeSelect+0x2e>
    1dd0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	49 f0       	breq	.+18     	; 0x1dec <TMR1_voidICedgeSelect+0x3e>
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <TMR1_voidICedgeSelect+0x4c>
	{
	case RISING:
		SET_BIT(TCCR1B, 6);
    1ddc:	ae e4       	ldi	r26, 0x4E	; 78
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	ee e4       	ldi	r30, 0x4E	; 78
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	80 64       	ori	r24, 0x40	; 64
    1de8:	8c 93       	st	X, r24
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <TMR1_voidICedgeSelect+0x4c>
		break;

	case FALLING:
		CLR_BIT(TCCR1B, 6);
    1dec:	ae e4       	ldi	r26, 0x4E	; 78
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	ee e4       	ldi	r30, 0x4E	; 78
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 7b       	andi	r24, 0xBF	; 191
    1df8:	8c 93       	st	X, r24
		break;
	}
}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <TMR1_voidGetICR1>:


u16 TMR1_voidGetICR1()
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1e0e:	e6 e4       	ldi	r30, 0x46	; 70
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <TMR1_voidSetCallBack_OVF>:

void(*TMR1_GPFun_OVF)(void) = '\0';

void TMR1_voidSetCallBack_OVF(void(*ptr))
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <TMR1_voidSetCallBack_OVF+0x6>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
	TMR1_GPFun_OVF = ptr;
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	90 93 a7 00 	sts	0x00A7, r25
    1e32:	80 93 a6 00 	sts	0x00A6, r24
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <__vector_9>:

void __vector_9()__attribute__((signal));
void __vector_9()
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	2f 93       	push	r18
    1e4c:	3f 93       	push	r19
    1e4e:	4f 93       	push	r20
    1e50:	5f 93       	push	r21
    1e52:	6f 93       	push	r22
    1e54:	7f 93       	push	r23
    1e56:	8f 93       	push	r24
    1e58:	9f 93       	push	r25
    1e5a:	af 93       	push	r26
    1e5c:	bf 93       	push	r27
    1e5e:	ef 93       	push	r30
    1e60:	ff 93       	push	r31
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GPFun_OVF != '\0')
    1e6a:	80 91 a6 00 	lds	r24, 0x00A6
    1e6e:	90 91 a7 00 	lds	r25, 0x00A7
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	29 f0       	breq	.+10     	; 0x1e80 <__vector_9+0x40>
	{
		TMR1_GPFun_OVF();
    1e76:	e0 91 a6 00 	lds	r30, 0x00A6
    1e7a:	f0 91 a7 00 	lds	r31, 0x00A7
    1e7e:	09 95       	icall
	}
}
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	bf 91       	pop	r27
    1e8a:	af 91       	pop	r26
    1e8c:	9f 91       	pop	r25
    1e8e:	8f 91       	pop	r24
    1e90:	7f 91       	pop	r23
    1e92:	6f 91       	pop	r22
    1e94:	5f 91       	pop	r21
    1e96:	4f 91       	pop	r20
    1e98:	3f 91       	pop	r19
    1e9a:	2f 91       	pop	r18
    1e9c:	0f 90       	pop	r0
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	0f 90       	pop	r0
    1ea2:	1f 90       	pop	r1
    1ea4:	18 95       	reti

00001ea6 <TMR1_voidSetCallBack_CAPT>:


void(*TMR1_GPFun_CAPT)(void) = '\0';

void TMR1_voidSetCallBack_CAPT(void(*ptr))
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <TMR1_voidSetCallBack_CAPT+0x6>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	TMR1_GPFun_CAPT = ptr;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	90 93 a9 00 	sts	0x00A9, r25
    1ebc:	80 93 a8 00 	sts	0x00A8, r24
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <__vector_6>:

void __vector_6()__attribute__((signal));
void __vector_6()
{
    1eca:	1f 92       	push	r1
    1ecc:	0f 92       	push	r0
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	0f 92       	push	r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	ef 93       	push	r30
    1eea:	ff 93       	push	r31
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GPFun_CAPT != '\0')
    1ef4:	80 91 a8 00 	lds	r24, 0x00A8
    1ef8:	90 91 a9 00 	lds	r25, 0x00A9
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	29 f0       	breq	.+10     	; 0x1f0a <__vector_6+0x40>
	{
		TMR1_GPFun_CAPT();
    1f00:	e0 91 a8 00 	lds	r30, 0x00A8
    1f04:	f0 91 a9 00 	lds	r31, 0x00A9
    1f08:	09 95       	icall
	}
}
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	ff 91       	pop	r31
    1f10:	ef 91       	pop	r30
    1f12:	bf 91       	pop	r27
    1f14:	af 91       	pop	r26
    1f16:	9f 91       	pop	r25
    1f18:	8f 91       	pop	r24
    1f1a:	7f 91       	pop	r23
    1f1c:	6f 91       	pop	r22
    1f1e:	5f 91       	pop	r21
    1f20:	4f 91       	pop	r20
    1f22:	3f 91       	pop	r19
    1f24:	2f 91       	pop	r18
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <UART_voidInit>:
#include "UART_Private.h"
#include "UART_Config.h"
#include "UART_Interface.h"

void UART_voidInit()
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB, 3);    // Transmitter enable
    1f3a:	aa e2       	ldi	r26, 0x2A	; 42
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	ea e2       	ldi	r30, 0x2A	; 42
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	88 60       	ori	r24, 0x08	; 8
    1f46:	8c 93       	st	X, r24
	SET_BIT(UCSRB, 4);    // Receiver enable
    1f48:	aa e2       	ldi	r26, 0x2A	; 42
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	ea e2       	ldi	r30, 0x2A	; 42
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 61       	ori	r24, 0x10	; 16
    1f54:	8c 93       	st	X, r24
	
	u8 LOC_UCSRC_Val;

	SET_BIT(LOC_UCSRC_Val, 7);  // Register select
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	80 68       	ori	r24, 0x80	; 128
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LOC_UCSRC_Val, 6);  // Asynchronous
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	8f 7b       	andi	r24, 0xBF	; 191
    1f60:	89 83       	std	Y+1, r24	; 0x01

	// Parity disable
	CLR_BIT(LOC_UCSRC_Val, 5);
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	8f 7d       	andi	r24, 0xDF	; 223
    1f66:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LOC_UCSRC_Val, 4);
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	8f 7e       	andi	r24, 0xEF	; 239
    1f6c:	89 83       	std	Y+1, r24	; 0x01

	// Stop bit (1 bit)
	CLR_BIT(LOC_UCSRC_Val, 3);
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	87 7f       	andi	r24, 0xF7	; 247
    1f72:	89 83       	std	Y+1, r24	; 0x01

	// Character size (8)
	SET_BIT(LOC_UCSRC_Val, 2);
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	84 60       	ori	r24, 0x04	; 4
    1f78:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LOC_UCSRC_Val, 1);
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	82 60       	ori	r24, 0x02	; 2
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	
	UCSRC = LOC_UCSRC_Val;
    1f80:	e0 e4       	ldi	r30, 0x40	; 64
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	80 83       	st	Z, r24
	UBRRL = 51;
    1f88:	e9 e2       	ldi	r30, 0x29	; 41
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	83 e3       	ldi	r24, 0x33	; 51
    1f8e:	80 83       	st	Z, r24
}
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <UART_voidSendData>:


void UART_voidSendData(u8 Copy_u8Data)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	0f 92       	push	r0
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
    1fa4:	ec e2       	ldi	r30, 0x2C	; 44
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	80 83       	st	Z, r24
	while(!GET_BIT(UCSRA, 6));
    1fac:	eb e2       	ldi	r30, 0x2B	; 43
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	82 95       	swap	r24
    1fb4:	86 95       	lsr	r24
    1fb6:	86 95       	lsr	r24
    1fb8:	83 70       	andi	r24, 0x03	; 3
    1fba:	88 23       	and	r24, r24
    1fbc:	b9 f3       	breq	.-18     	; 0x1fac <UART_voidSendData+0x14>
	SET_BIT(UCSRA, 6);   // Clear flag
    1fbe:	ab e2       	ldi	r26, 0x2B	; 43
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	eb e2       	ldi	r30, 0x2B	; 43
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 64       	ori	r24, 0x40	; 64
    1fca:	8c 93       	st	X, r24
}
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <UART_voidSendString>:


void UART_voidSendString(u8 Copy_u8String[])
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <UART_voidSendString+0x6>
    1fda:	0f 92       	push	r0
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	9b 83       	std	Y+3, r25	; 0x03
    1fe2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1fe4:	19 82       	std	Y+1, r1	; 0x01
    1fe6:	0e c0       	rjmp	.+28     	; 0x2004 <UART_voidSendString+0x30>
	while(Copy_u8String[i] != '\0')
	{
		UART_voidSendData(Copy_u8String[i]);
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	e2 0f       	add	r30, r18
    1ff6:	f3 1f       	adc	r31, r19
    1ff8:	80 81       	ld	r24, Z
    1ffa:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <UART_voidSendData>
		i++;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	89 83       	std	Y+1, r24	; 0x01


void UART_voidSendString(u8 Copy_u8String[])
{
	u8 i = 0;
	while(Copy_u8String[i] != '\0')
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	fc 01       	movw	r30, r24
    2010:	e2 0f       	add	r30, r18
    2012:	f3 1f       	adc	r31, r19
    2014:	80 81       	ld	r24, Z
    2016:	88 23       	and	r24, r24
    2018:	39 f7       	brne	.-50     	; 0x1fe8 <UART_voidSendString+0x14>
	{
		UART_voidSendData(Copy_u8String[i]);
		i++;
	}
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <UART_voidSendDigits>:


void UART_voidSendDigits(u32 Copy_u32Num)
{
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	65 97       	sbiw	r28, 0x15	; 21
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	6a 8b       	std	Y+18, r22	; 0x12
    2040:	7b 8b       	std	Y+19, r23	; 0x13
    2042:	8c 8b       	std	Y+20, r24	; 0x14
    2044:	9d 8b       	std	Y+21, r25	; 0x15
	u8 size=0, i, c;
    2046:	1f 82       	std	Y+7, r1	; 0x07
	u8 arr[10];
	u32 temp = Copy_u32Num;
    2048:	8a 89       	ldd	r24, Y+18	; 0x12
    204a:	9b 89       	ldd	r25, Y+19	; 0x13
    204c:	ac 89       	ldd	r26, Y+20	; 0x14
    204e:	bd 89       	ldd	r27, Y+21	; 0x15
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	ab 83       	std	Y+3, r26	; 0x03
    2056:	bc 83       	std	Y+4, r27	; 0x04
    2058:	15 c0       	rjmp	.+42     	; 0x2084 <UART_voidSendDigits+0x5e>
	while(temp)
	{
		size++;
    205a:	8f 81       	ldd	r24, Y+7	; 0x07
    205c:	8f 5f       	subi	r24, 0xFF	; 255
    205e:	8f 83       	std	Y+7, r24	; 0x07
		temp /= 10;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	ab 81       	ldd	r26, Y+3	; 0x03
    2066:	bc 81       	ldd	r27, Y+4	; 0x04
    2068:	2a e0       	ldi	r18, 0x0A	; 10
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 b4 11 	call	0x2368	; 0x2368 <__udivmodsi4>
    2078:	da 01       	movw	r26, r20
    207a:	c9 01       	movw	r24, r18
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	ab 83       	std	Y+3, r26	; 0x03
    2082:	bc 83       	std	Y+4, r27	; 0x04
void UART_voidSendDigits(u32 Copy_u32Num)
{
	u8 size=0, i, c;
	u8 arr[10];
	u32 temp = Copy_u32Num;
	while(temp)
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	ab 81       	ldd	r26, Y+3	; 0x03
    208a:	bc 81       	ldd	r27, Y+4	; 0x04
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	a1 05       	cpc	r26, r1
    2090:	b1 05       	cpc	r27, r1
    2092:	19 f7       	brne	.-58     	; 0x205a <UART_voidSendDigits+0x34>
	{
		size++;
		temp /= 10;
	}

	i = size-1;
    2094:	8f 81       	ldd	r24, Y+7	; 0x07
    2096:	81 50       	subi	r24, 0x01	; 1
    2098:	8e 83       	std	Y+6, r24	; 0x06
    209a:	2d c0       	rjmp	.+90     	; 0x20f6 <UART_voidSendDigits+0xd0>
	while(Copy_u32Num)
	{
		arr[i] = Copy_u32Num % 10;
    209c:	8e 81       	ldd	r24, Y+6	; 0x06
    209e:	08 2f       	mov	r16, r24
    20a0:	10 e0       	ldi	r17, 0x00	; 0
    20a2:	8a 89       	ldd	r24, Y+18	; 0x12
    20a4:	9b 89       	ldd	r25, Y+19	; 0x13
    20a6:	ac 89       	ldd	r26, Y+20	; 0x14
    20a8:	bd 89       	ldd	r27, Y+21	; 0x15
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 b4 11 	call	0x2368	; 0x2368 <__udivmodsi4>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	28 2f       	mov	r18, r24
    20c0:	ce 01       	movw	r24, r28
    20c2:	08 96       	adiw	r24, 0x08	; 8
    20c4:	fc 01       	movw	r30, r24
    20c6:	e0 0f       	add	r30, r16
    20c8:	f1 1f       	adc	r31, r17
    20ca:	20 83       	st	Z, r18
		Copy_u32Num /= 10;
    20cc:	8a 89       	ldd	r24, Y+18	; 0x12
    20ce:	9b 89       	ldd	r25, Y+19	; 0x13
    20d0:	ac 89       	ldd	r26, Y+20	; 0x14
    20d2:	bd 89       	ldd	r27, Y+21	; 0x15
    20d4:	2a e0       	ldi	r18, 0x0A	; 10
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 b4 11 	call	0x2368	; 0x2368 <__udivmodsi4>
    20e4:	da 01       	movw	r26, r20
    20e6:	c9 01       	movw	r24, r18
    20e8:	8a 8b       	std	Y+18, r24	; 0x12
    20ea:	9b 8b       	std	Y+19, r25	; 0x13
    20ec:	ac 8b       	std	Y+20, r26	; 0x14
    20ee:	bd 8b       	std	Y+21, r27	; 0x15
		i--;
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	81 50       	subi	r24, 0x01	; 1
    20f4:	8e 83       	std	Y+6, r24	; 0x06
		size++;
		temp /= 10;
	}

	i = size-1;
	while(Copy_u32Num)
    20f6:	8a 89       	ldd	r24, Y+18	; 0x12
    20f8:	9b 89       	ldd	r25, Y+19	; 0x13
    20fa:	ac 89       	ldd	r26, Y+20	; 0x14
    20fc:	bd 89       	ldd	r27, Y+21	; 0x15
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	a1 05       	cpc	r26, r1
    2102:	b1 05       	cpc	r27, r1
    2104:	59 f6       	brne	.-106    	; 0x209c <UART_voidSendDigits+0x76>
		arr[i] = Copy_u32Num % 10;
		Copy_u32Num /= 10;
		i--;
	}

	for(c = 0; c < size; c++)
    2106:	1d 82       	std	Y+5, r1	; 0x05
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <UART_voidSendDigits+0x102>
	{
		UART_voidSendData(arr[c] + 48);
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	ce 01       	movw	r24, r28
    2112:	08 96       	adiw	r24, 0x08	; 8
    2114:	fc 01       	movw	r30, r24
    2116:	e2 0f       	add	r30, r18
    2118:	f3 1f       	adc	r31, r19
    211a:	80 81       	ld	r24, Z
    211c:	80 5d       	subi	r24, 0xD0	; 208
    211e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <UART_voidSendData>
		arr[i] = Copy_u32Num % 10;
		Copy_u32Num /= 10;
		i--;
	}

	for(c = 0; c < size; c++)
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	8f 5f       	subi	r24, 0xFF	; 255
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	9d 81       	ldd	r25, Y+5	; 0x05
    212a:	8f 81       	ldd	r24, Y+7	; 0x07
    212c:	98 17       	cp	r25, r24
    212e:	68 f3       	brcs	.-38     	; 0x210a <UART_voidSendDigits+0xe4>
	{
		UART_voidSendData(arr[c] + 48);
	}
}
    2130:	65 96       	adiw	r28, 0x15	; 21
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <UART_u8ReceiveData>:

u8 UART_u8ReceiveData()
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(UCSRA, 7))
    2150:	eb e2       	ldi	r30, 0x2B	; 43
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	88 23       	and	r24, r24
    2158:	6c f4       	brge	.+26     	; 0x2174 <UART_u8ReceiveData+0x2e>
	{
		CLR_BIT(UCSRA, 7);
    215a:	ab e2       	ldi	r26, 0x2B	; 43
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	eb e2       	ldi	r30, 0x2B	; 43
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8f 77       	andi	r24, 0x7F	; 127
    2166:	8c 93       	st	X, r24
		return UDR;
    2168:	ec e2       	ldi	r30, 0x2C	; 44
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	89 83       	std	Y+1, r24	; 0x01
	}
}
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	00 c0       	rjmp	.+0      	; 0x2174 <UART_u8ReceiveData+0x2e>
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <main>:
#include "TMR1_Interface.h"
//#include "UART_Interface.h"
#include "avr/delay.h"

int main()
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	6b 97       	sbiw	r28, 0x1b	; 27
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
	u8 input, i=0, wrong = 0; // warning = 0;
    2190:	18 8a       	std	Y+16, r1	; 0x10
    2192:	1f 86       	std	Y+15, r1	; 0x0f
	u8 currentPass[] = "1567";
    2194:	ce 01       	movw	r24, r28
    2196:	42 96       	adiw	r24, 0x12	; 18
    2198:	98 8f       	std	Y+24, r25	; 0x18
    219a:	8f 8b       	std	Y+23, r24	; 0x17
    219c:	e9 e8       	ldi	r30, 0x89	; 137
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	fa 8f       	std	Y+26, r31	; 0x1a
    21a2:	e9 8f       	std	Y+25, r30	; 0x19
    21a4:	f5 e0       	ldi	r31, 0x05	; 5
    21a6:	fb 8f       	std	Y+27, r31	; 0x1b
    21a8:	e9 8d       	ldd	r30, Y+25	; 0x19
    21aa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    21ac:	00 80       	ld	r0, Z
    21ae:	89 8d       	ldd	r24, Y+25	; 0x19
    21b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	9a 8f       	std	Y+26, r25	; 0x1a
    21b6:	89 8f       	std	Y+25, r24	; 0x19
    21b8:	ef 89       	ldd	r30, Y+23	; 0x17
    21ba:	f8 8d       	ldd	r31, Y+24	; 0x18
    21bc:	00 82       	st	Z, r0
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	98 8d       	ldd	r25, Y+24	; 0x18
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	98 8f       	std	Y+24, r25	; 0x18
    21c6:	8f 8b       	std	Y+23, r24	; 0x17
    21c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21ca:	91 50       	subi	r25, 0x01	; 1
    21cc:	9b 8f       	std	Y+27, r25	; 0x1b
    21ce:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21d0:	ee 23       	and	r30, r30
    21d2:	51 f7       	brne	.-44     	; 0x21a8 <main+0x2c>

	// Initialization
	LCD_voidInit();
    21d4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_voidInit>
	KYP_voidInit();
    21d8:	0e 94 1b 09 	call	0x1236	; 0x1236 <KYP_voidInit>
	TMR1_voidInit();
    21dc:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <TMR1_voidInit>
	//UART_voidInit();

	// Servo motor setup
	TMR1_voidLoadCounterTop(20000);
    21e0:	80 e2       	ldi	r24, 0x20	; 32
    21e2:	9e e4       	ldi	r25, 0x4E	; 78
    21e4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <TMR1_voidLoadCounterTop>
	DIO_voidSetPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	65 e0       	ldi	r22, 0x05	; 5
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>

	// Warning LED
	//DIO_voidSetPinDirection(PORTA_ID, PIN5_ID, PIN_OUTPUT);

	LCD_voidDisplayString("Enter password");
    21f2:	80 e6       	ldi	r24, 0x60	; 96
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_voidDisplayString>
		if(warning == '1')
		{
			DIO_voidSetPinValue(PORTA_ID, PIN5_ID, PIN_HIGH);
		}*/

		input = KYP_u8GetPressedKey();
    21fa:	0e 94 2a 09 	call	0x1254	; 0x1254 <KYP_u8GetPressedKey>
    21fe:	89 8b       	std	Y+17, r24	; 0x11
		if(input != ALL_NOT_PRESSED)
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	8f 3f       	cpi	r24, 0xFF	; 255
    2204:	d1 f3       	breq	.-12     	; 0x21fa <main+0x7e>
		{
			/* Reset key is pressed
			 * Reset password characters counter and reset flag
			 * Reset warning LED
			 */
			if (input == 'c')
    2206:	89 89       	ldd	r24, Y+17	; 0x11
    2208:	83 36       	cpi	r24, 0x63	; 99
    220a:	41 f4       	brne	.+16     	; 0x221c <main+0xa0>
			{
				i = 0;
    220c:	18 8a       	std	Y+16, r1	; 0x10
				wrong = 0;
    220e:	1f 86       	std	Y+15, r1	; 0x0f
				//warning = 0;
				DIO_voidSetPinValue(PORTA_ID, PIN5_ID, PIN_LOW);
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	65 e0       	ldi	r22, 0x05	; 5
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_voidSetPinValue>
    221a:	ef cf       	rjmp	.-34     	; 0x21fa <main+0x7e>
			}

			/* Check the pressed input with the relative character in the reserved password
			 * Set the flag to 1 in case of wrong input
			 */
			if(input != currentPass[i])
    221c:	88 89       	ldd	r24, Y+16	; 0x10
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	ce 01       	movw	r24, r28
    2224:	42 96       	adiw	r24, 0x12	; 18
    2226:	fc 01       	movw	r30, r24
    2228:	e2 0f       	add	r30, r18
    222a:	f3 1f       	adc	r31, r19
    222c:	90 81       	ld	r25, Z
    222e:	89 89       	ldd	r24, Y+17	; 0x11
    2230:	98 17       	cp	r25, r24
    2232:	11 f0       	breq	.+4      	; 0x2238 <main+0xbc>
			{
				wrong = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	8f 87       	std	Y+15, r24	; 0x0f
			}
			i++;
    2238:	88 89       	ldd	r24, Y+16	; 0x10
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	88 8b       	std	Y+16, r24	; 0x10

			// Check the flag and display the output on the LCD
			if (i == 4)
    223e:	88 89       	ldd	r24, Y+16	; 0x10
    2240:	84 30       	cpi	r24, 0x04	; 4
    2242:	d9 f6       	brne	.-74     	; 0x21fa <main+0x7e>
			{
				LCD_voidClear();
    2244:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_voidClear>
				if (wrong == 0)
    2248:	8f 85       	ldd	r24, Y+15	; 0x0f
    224a:	88 23       	and	r24, r24
    224c:	09 f0       	breq	.+2      	; 0x2250 <main+0xd4>
    224e:	85 c0       	rjmp	.+266    	; 0x235a <main+0x1de>
				{
					LCD_voidDisplayString("Welcome");
    2250:	8f e6       	ldi	r24, 0x6F	; 111
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_voidDisplayString>
					TMR1_voidLoadOCR1A(1499);
    2258:	8b ed       	ldi	r24, 0xDB	; 219
    225a:	95 e0       	ldi	r25, 0x05	; 5
    225c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <TMR1_voidLoadOCR1A>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	aa ef       	ldi	r26, 0xFA	; 250
    2266:	b4 e4       	ldi	r27, 0x44	; 68
    2268:	8b 87       	std	Y+11, r24	; 0x0b
    226a:	9c 87       	std	Y+12, r25	; 0x0c
    226c:	ad 87       	std	Y+13, r26	; 0x0d
    226e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	6b 85       	ldd	r22, Y+11	; 0x0b
    2272:	7c 85       	ldd	r23, Y+12	; 0x0c
    2274:	8d 85       	ldd	r24, Y+13	; 0x0d
    2276:	9e 85       	ldd	r25, Y+14	; 0x0e
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a ef       	ldi	r20, 0xFA	; 250
    227e:	54 e4       	ldi	r21, 0x44	; 68
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8f 83       	std	Y+7, r24	; 0x07
    228a:	98 87       	std	Y+8, r25	; 0x08
    228c:	a9 87       	std	Y+9, r26	; 0x09
    228e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <main+0x136>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <main+0x1b4>
	else if (__tmp > 65535)
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <main+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <main+0x196>
    22f4:	88 ec       	ldi	r24, 0xC8	; 200
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9c 83       	std	Y+4, r25	; 0x04
    22fa:	8b 83       	std	Y+3, r24	; 0x03
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <main+0x184>
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	69 f7       	brne	.-38     	; 0x22f4 <main+0x178>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <main+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9e 83       	std	Y+6, r25	; 0x06
    232e:	8d 83       	std	Y+5, r24	; 0x05
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <main+0x1c0>
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);
					TMR1_voidLoadOCR1A(980);
    2344:	84 ed       	ldi	r24, 0xD4	; 212
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <TMR1_voidLoadOCR1A>
					LCD_voidClear();
    234c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_voidClear>
					LCD_voidDisplayString("Enter password");
    2350:	80 e6       	ldi	r24, 0x60	; 96
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_voidDisplayString>
    2358:	04 c0       	rjmp	.+8      	; 0x2362 <main+0x1e6>
				}

				else
				{
					LCD_voidDisplayString("Re-enter password");
    235a:	87 e7       	ldi	r24, 0x77	; 119
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_voidDisplayString>
				}

				// Reset variables to start a new loop (Ask for password again)
				i = 0;
    2362:	18 8a       	std	Y+16, r1	; 0x10
				wrong = 0;
    2364:	1f 86       	std	Y+15, r1	; 0x0f
    2366:	49 cf       	rjmp	.-366    	; 0x21fa <main+0x7e>

00002368 <__udivmodsi4>:
    2368:	a1 e2       	ldi	r26, 0x21	; 33
    236a:	1a 2e       	mov	r1, r26
    236c:	aa 1b       	sub	r26, r26
    236e:	bb 1b       	sub	r27, r27
    2370:	fd 01       	movw	r30, r26
    2372:	0d c0       	rjmp	.+26     	; 0x238e <__udivmodsi4_ep>

00002374 <__udivmodsi4_loop>:
    2374:	aa 1f       	adc	r26, r26
    2376:	bb 1f       	adc	r27, r27
    2378:	ee 1f       	adc	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	a2 17       	cp	r26, r18
    237e:	b3 07       	cpc	r27, r19
    2380:	e4 07       	cpc	r30, r20
    2382:	f5 07       	cpc	r31, r21
    2384:	20 f0       	brcs	.+8      	; 0x238e <__udivmodsi4_ep>
    2386:	a2 1b       	sub	r26, r18
    2388:	b3 0b       	sbc	r27, r19
    238a:	e4 0b       	sbc	r30, r20
    238c:	f5 0b       	sbc	r31, r21

0000238e <__udivmodsi4_ep>:
    238e:	66 1f       	adc	r22, r22
    2390:	77 1f       	adc	r23, r23
    2392:	88 1f       	adc	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	1a 94       	dec	r1
    2398:	69 f7       	brne	.-38     	; 0x2374 <__udivmodsi4_loop>
    239a:	60 95       	com	r22
    239c:	70 95       	com	r23
    239e:	80 95       	com	r24
    23a0:	90 95       	com	r25
    23a2:	9b 01       	movw	r18, r22
    23a4:	ac 01       	movw	r20, r24
    23a6:	bd 01       	movw	r22, r26
    23a8:	cf 01       	movw	r24, r30
    23aa:	08 95       	ret

000023ac <__prologue_saves__>:
    23ac:	2f 92       	push	r2
    23ae:	3f 92       	push	r3
    23b0:	4f 92       	push	r4
    23b2:	5f 92       	push	r5
    23b4:	6f 92       	push	r6
    23b6:	7f 92       	push	r7
    23b8:	8f 92       	push	r8
    23ba:	9f 92       	push	r9
    23bc:	af 92       	push	r10
    23be:	bf 92       	push	r11
    23c0:	cf 92       	push	r12
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	ca 1b       	sub	r28, r26
    23d6:	db 0b       	sbc	r29, r27
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	09 94       	ijmp

000023e4 <__epilogue_restores__>:
    23e4:	2a 88       	ldd	r2, Y+18	; 0x12
    23e6:	39 88       	ldd	r3, Y+17	; 0x11
    23e8:	48 88       	ldd	r4, Y+16	; 0x10
    23ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    23f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f6:	b9 84       	ldd	r11, Y+9	; 0x09
    23f8:	c8 84       	ldd	r12, Y+8	; 0x08
    23fa:	df 80       	ldd	r13, Y+7	; 0x07
    23fc:	ee 80       	ldd	r14, Y+6	; 0x06
    23fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2400:	0c 81       	ldd	r16, Y+4	; 0x04
    2402:	1b 81       	ldd	r17, Y+3	; 0x03
    2404:	aa 81       	ldd	r26, Y+2	; 0x02
    2406:	b9 81       	ldd	r27, Y+1	; 0x01
    2408:	ce 0f       	add	r28, r30
    240a:	d1 1d       	adc	r29, r1
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	ed 01       	movw	r28, r26
    2418:	08 95       	ret

0000241a <_exit>:
    241a:	f8 94       	cli

0000241c <__stop_program>:
    241c:	ff cf       	rjmp	.-2      	; 0x241c <__stop_program>
