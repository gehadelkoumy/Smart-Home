
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00002a16  00002aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000bc  008000bc  00002b06  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8f  00000000  00000000  00004f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000601f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000618f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a62b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__vector_6>
      1c:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 46 10 	jmp	0x208c	; 0x208c <__vector_9>
      28:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__vector_10>
      2c:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 11 	call	0x2326	; 0x2326 <main>
      8a:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 eb       	ldi	r26, 0xB4	; 180
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 eb       	ldi	r24, 0xB4	; 180
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include "DIO_Interface.h"
#include "ADC_Config.h"
#include "ADC_Interface.h"

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC & AREF*/
	SetBit(ADMUX , pin6);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	ClrBit(ADMUX , pin7);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	/*Right Adjust*/
	ClrBit(ADMUX , pin5);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <ADC_voidStartConversion>:

u16 ADC_voidStartConversion(u16 Copy_u16SelectChannel , u8 Copy_u8DivisionFactor)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <ADC_voidStartConversion+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <ADC_voidStartConversion+0x8>
     b86:	0f 92       	push	r0
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	6b 83       	std	Y+3, r22	; 0x03
	/*channel selection*/
	switch(Copy_u16SelectChannel)
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	9d 83       	std	Y+5, r25	; 0x05
     b98:	8c 83       	std	Y+4, r24	; 0x04
     b9a:	8c 81       	ldd	r24, Y+4	; 0x04
     b9c:	9d 81       	ldd	r25, Y+5	; 0x05
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <ADC_voidStartConversion+0x28>
     ba4:	97 c0       	rjmp	.+302    	; 0xcd4 <ADC_voidStartConversion+0x156>
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	9d 81       	ldd	r25, Y+5	; 0x05
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	91 05       	cpc	r25, r1
     bae:	68 f4       	brcc	.+26     	; 0xbca <ADC_voidStartConversion+0x4c>
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	9d 81       	ldd	r25, Y+5	; 0x05
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <ADC_voidStartConversion+0x3e>
     bba:	44 c0       	rjmp	.+136    	; 0xc44 <ADC_voidStartConversion+0xc6>
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	91 05       	cpc	r25, r1
     bc4:	08 f0       	brcs	.+2      	; 0xbc8 <ADC_voidStartConversion+0x4a>
     bc6:	62 c0       	rjmp	.+196    	; 0xc8c <ADC_voidStartConversion+0x10e>
     bc8:	19 c0       	rjmp	.+50     	; 0xbfc <ADC_voidStartConversion+0x7e>
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
     bcc:	9d 81       	ldd	r25, Y+5	; 0x05
     bce:	85 30       	cpi	r24, 0x05	; 5
     bd0:	91 05       	cpc	r25, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <ADC_voidStartConversion+0x58>
     bd4:	c7 c0       	rjmp	.+398    	; 0xd64 <ADC_voidStartConversion+0x1e6>
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	85 30       	cpi	r24, 0x05	; 5
     bdc:	91 05       	cpc	r25, r1
     bde:	08 f4       	brcc	.+2      	; 0xbe2 <ADC_voidStartConversion+0x64>
     be0:	9d c0       	rjmp	.+314    	; 0xd1c <ADC_voidStartConversion+0x19e>
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	9d 81       	ldd	r25, Y+5	; 0x05
     be6:	86 30       	cpi	r24, 0x06	; 6
     be8:	91 05       	cpc	r25, r1
     bea:	09 f4       	brne	.+2      	; 0xbee <ADC_voidStartConversion+0x70>
     bec:	df c0       	rjmp	.+446    	; 0xdac <ADC_voidStartConversion+0x22e>
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	9d 81       	ldd	r25, Y+5	; 0x05
     bf2:	87 30       	cpi	r24, 0x07	; 7
     bf4:	91 05       	cpc	r25, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <ADC_voidStartConversion+0x7c>
     bf8:	fd c0       	rjmp	.+506    	; 0xdf4 <ADC_voidStartConversion+0x276>
     bfa:	1f c1       	rjmp	.+574    	; 0xe3a <ADC_voidStartConversion+0x2bc>
	{
	case ADC0 :
		ClrBit(ADMUX , pin0);
     bfc:	a7 e2       	ldi	r26, 0x27	; 39
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e2       	ldi	r30, 0x27	; 39
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8e 7f       	andi	r24, 0xFE	; 254
     c08:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin1);
     c0a:	a7 e2       	ldi	r26, 0x27	; 39
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e7 e2       	ldi	r30, 0x27	; 39
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8d 7f       	andi	r24, 0xFD	; 253
     c16:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin2);
     c18:	a7 e2       	ldi	r26, 0x27	; 39
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e7 e2       	ldi	r30, 0x27	; 39
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8b 7f       	andi	r24, 0xFB	; 251
     c24:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     c26:	a7 e2       	ldi	r26, 0x27	; 39
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e2       	ldi	r30, 0x27	; 39
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     c34:	a7 e2       	ldi	r26, 0x27	; 39
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e2       	ldi	r30, 0x27	; 39
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	8f 7e       	andi	r24, 0xEF	; 239
     c40:	8c 93       	st	X, r24
     c42:	fb c0       	rjmp	.+502    	; 0xe3a <ADC_voidStartConversion+0x2bc>
		break;

	case ADC1 :
		SetBit(ADMUX , pin0);
     c44:	a7 e2       	ldi	r26, 0x27	; 39
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e7 e2       	ldi	r30, 0x27	; 39
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin1);
     c52:	a7 e2       	ldi	r26, 0x27	; 39
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e7 e2       	ldi	r30, 0x27	; 39
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8d 7f       	andi	r24, 0xFD	; 253
     c5e:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin2);
     c60:	a7 e2       	ldi	r26, 0x27	; 39
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e7 e2       	ldi	r30, 0x27	; 39
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8b 7f       	andi	r24, 0xFB	; 251
     c6c:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     c6e:	a7 e2       	ldi	r26, 0x27	; 39
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e7 e2       	ldi	r30, 0x27	; 39
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	87 7f       	andi	r24, 0xF7	; 247
     c7a:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     c7c:	a7 e2       	ldi	r26, 0x27	; 39
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e7 e2       	ldi	r30, 0x27	; 39
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8f 7e       	andi	r24, 0xEF	; 239
     c88:	8c 93       	st	X, r24
     c8a:	d7 c0       	rjmp	.+430    	; 0xe3a <ADC_voidStartConversion+0x2bc>
		break;

	case ADC2 :
		ClrBit(ADMUX , pin0);
     c8c:	a7 e2       	ldi	r26, 0x27	; 39
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e7 e2       	ldi	r30, 0x27	; 39
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8e 7f       	andi	r24, 0xFE	; 254
     c98:	8c 93       	st	X, r24
		SetBit(ADMUX , pin1);
     c9a:	a7 e2       	ldi	r26, 0x27	; 39
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e2       	ldi	r30, 0x27	; 39
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	82 60       	ori	r24, 0x02	; 2
     ca6:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin2);
     ca8:	a7 e2       	ldi	r26, 0x27	; 39
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e2       	ldi	r30, 0x27	; 39
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8b 7f       	andi	r24, 0xFB	; 251
     cb4:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     cb6:	a7 e2       	ldi	r26, 0x27	; 39
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e2       	ldi	r30, 0x27	; 39
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	87 7f       	andi	r24, 0xF7	; 247
     cc2:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     cc4:	a7 e2       	ldi	r26, 0x27	; 39
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e2       	ldi	r30, 0x27	; 39
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7e       	andi	r24, 0xEF	; 239
     cd0:	8c 93       	st	X, r24
     cd2:	b3 c0       	rjmp	.+358    	; 0xe3a <ADC_voidStartConversion+0x2bc>
		break;

	case ADC3 :
		SetBit(ADMUX , pin0);
     cd4:	a7 e2       	ldi	r26, 0x27	; 39
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e7 e2       	ldi	r30, 0x27	; 39
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	8c 93       	st	X, r24
		SetBit(ADMUX , pin1);
     ce2:	a7 e2       	ldi	r26, 0x27	; 39
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e2       	ldi	r30, 0x27	; 39
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	82 60       	ori	r24, 0x02	; 2
     cee:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin2);
     cf0:	a7 e2       	ldi	r26, 0x27	; 39
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e2       	ldi	r30, 0x27	; 39
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8b 7f       	andi	r24, 0xFB	; 251
     cfc:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     cfe:	a7 e2       	ldi	r26, 0x27	; 39
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e7 e2       	ldi	r30, 0x27	; 39
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	87 7f       	andi	r24, 0xF7	; 247
     d0a:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     d0c:	a7 e2       	ldi	r26, 0x27	; 39
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e7 e2       	ldi	r30, 0x27	; 39
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8f 7e       	andi	r24, 0xEF	; 239
     d18:	8c 93       	st	X, r24
     d1a:	8f c0       	rjmp	.+286    	; 0xe3a <ADC_voidStartConversion+0x2bc>
		break;

	case ADC4 :
		ClrBit(ADMUX , pin0);
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8e 7f       	andi	r24, 0xFE	; 254
     d28:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin1);
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8d 7f       	andi	r24, 0xFD	; 253
     d36:	8c 93       	st	X, r24
		SetBit(ADMUX , pin2);
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	84 60       	ori	r24, 0x04	; 4
     d44:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     d46:	a7 e2       	ldi	r26, 0x27	; 39
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	87 7f       	andi	r24, 0xF7	; 247
     d52:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8f 7e       	andi	r24, 0xEF	; 239
     d60:	8c 93       	st	X, r24
     d62:	6b c0       	rjmp	.+214    	; 0xe3a <ADC_voidStartConversion+0x2bc>
		break;

	case ADC5 :
		SetBit(ADMUX , pin0);
     d64:	a7 e2       	ldi	r26, 0x27	; 39
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e2       	ldi	r30, 0x27	; 39
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	81 60       	ori	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin1);
     d72:	a7 e2       	ldi	r26, 0x27	; 39
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e2       	ldi	r30, 0x27	; 39
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8d 7f       	andi	r24, 0xFD	; 253
     d7e:	8c 93       	st	X, r24
		SetBit(ADMUX , pin2);
     d80:	a7 e2       	ldi	r26, 0x27	; 39
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e7 e2       	ldi	r30, 0x27	; 39
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	84 60       	ori	r24, 0x04	; 4
     d8c:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     d8e:	a7 e2       	ldi	r26, 0x27	; 39
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e2       	ldi	r30, 0x27	; 39
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	87 7f       	andi	r24, 0xF7	; 247
     d9a:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     d9c:	a7 e2       	ldi	r26, 0x27	; 39
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e7 e2       	ldi	r30, 0x27	; 39
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7e       	andi	r24, 0xEF	; 239
     da8:	8c 93       	st	X, r24
     daa:	47 c0       	rjmp	.+142    	; 0xe3a <ADC_voidStartConversion+0x2bc>
		break;

	case ADC6 :
		ClrBit(ADMUX , pin0);
     dac:	a7 e2       	ldi	r26, 0x27	; 39
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e7 e2       	ldi	r30, 0x27	; 39
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	8c 93       	st	X, r24
		SetBit(ADMUX , pin1);
     dba:	a7 e2       	ldi	r26, 0x27	; 39
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e7 e2       	ldi	r30, 0x27	; 39
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	8c 93       	st	X, r24
		SetBit(ADMUX , pin2);
     dc8:	a7 e2       	ldi	r26, 0x27	; 39
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e7 e2       	ldi	r30, 0x27	; 39
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	84 60       	ori	r24, 0x04	; 4
     dd4:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     dd6:	a7 e2       	ldi	r26, 0x27	; 39
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e7 e2       	ldi	r30, 0x27	; 39
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	87 7f       	andi	r24, 0xF7	; 247
     de2:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     de4:	a7 e2       	ldi	r26, 0x27	; 39
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e7 e2       	ldi	r30, 0x27	; 39
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 7e       	andi	r24, 0xEF	; 239
     df0:	8c 93       	st	X, r24
     df2:	23 c0       	rjmp	.+70     	; 0xe3a <ADC_voidStartConversion+0x2bc>
		break;

	case ADC7 :
		SetBit(ADMUX , pin0);
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	81 60       	ori	r24, 0x01	; 1
     e00:	8c 93       	st	X, r24
		SetBit(ADMUX , pin1);
     e02:	a7 e2       	ldi	r26, 0x27	; 39
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e2       	ldi	r30, 0x27	; 39
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	8c 93       	st	X, r24
		SetBit(ADMUX , pin2);
     e10:	a7 e2       	ldi	r26, 0x27	; 39
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e2       	ldi	r30, 0x27	; 39
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	84 60       	ori	r24, 0x04	; 4
     e1c:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin3);
     e1e:	a7 e2       	ldi	r26, 0x27	; 39
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e2       	ldi	r30, 0x27	; 39
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	87 7f       	andi	r24, 0xF7	; 247
     e2a:	8c 93       	st	X, r24
		ClrBit(ADMUX , pin4);
     e2c:	a7 e2       	ldi	r26, 0x27	; 39
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e2       	ldi	r30, 0x27	; 39
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7e       	andi	r24, 0xEF	; 239
     e38:	8c 93       	st	X, r24
		break;
	}
	/*pre_scaler*/
	ADCSRA = Copy_u8DivisionFactor;
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	80 83       	st	Z, r24
	/*ADC Enable*/
	SetBit(ADCSRA , pin7);
     e42:	a6 e2       	ldi	r26, 0x26	; 38
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e6 e2       	ldi	r30, 0x26	; 38
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	8c 93       	st	X, r24
	/*Start conversion*/
	SetBit(ADCSRA , pin6);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e6 e2       	ldi	r30, 0x26	; 38
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	8c 93       	st	X, r24

	while(GetBit(ADCSRA , pin6) != 0);
     e5e:	e6 e2       	ldi	r30, 0x26	; 38
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	82 95       	swap	r24
     e66:	86 95       	lsr	r24
     e68:	86 95       	lsr	r24
     e6a:	83 70       	andi	r24, 0x03	; 3
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	81 70       	andi	r24, 0x01	; 1
     e72:	90 70       	andi	r25, 0x00	; 0
     e74:	88 23       	and	r24, r24
     e76:	99 f7       	brne	.-26     	; 0xe5e <ADC_voidStartConversion+0x2e0>

	return ADC;
     e78:	e4 e2       	ldi	r30, 0x24	; 36
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <DIO_voidSetPinDirection>:
#include "DIO_Interface.h"

                                      /*Functions Implementation*/
//____________________________________________Pin direction________________________________________________				   
void DIO_voidSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinDirection)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	27 97       	sbiw	r28, 0x07	; 7
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	6a 83       	std	Y+2, r22	; 0x02
     ea8:	4b 83       	std	Y+3, r20	; 0x03
	        /*Output Mode*/
	if(Copy_u8PinDirection == 1)     
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <DIO_voidSetPinDirection+0x22>
     eb0:	6f c0       	rjmp	.+222    	; 0xf90 <DIO_voidSetPinDirection+0x100>
	{
		switch(Copy_u8PortID)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3f 83       	std	Y+7, r19	; 0x07
     eba:	2e 83       	std	Y+6, r18	; 0x06
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	49 f1       	breq	.+82     	; 0xf18 <DIO_voidSetPinDirection+0x88>
     ec6:	2e 81       	ldd	r18, Y+6	; 0x06
     ec8:	3f 81       	ldd	r19, Y+7	; 0x07
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	2c f4       	brge	.+10     	; 0xeda <DIO_voidSetPinDirection+0x4a>
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	61 f0       	breq	.+24     	; 0xef0 <DIO_voidSetPinDirection+0x60>
     ed8:	d2 c0       	rjmp	.+420    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
     eda:	2e 81       	ldd	r18, Y+6	; 0x06
     edc:	3f 81       	ldd	r19, Y+7	; 0x07
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	71 f1       	breq	.+92     	; 0xf40 <DIO_voidSetPinDirection+0xb0>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	e9 f1       	breq	.+122    	; 0xf68 <DIO_voidSetPinDirection+0xd8>
     eee:	c7 c0       	rjmp	.+398    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
		{
			case portA :
			SetBit(DDRA_REG , Copy_u8PinID);
     ef0:	aa e3       	ldi	r26, 0x3A	; 58
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ea e3       	ldi	r30, 0x3A	; 58
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_voidSetPinDirection+0x7e>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_voidSetPinDirection+0x7a>
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	b3 c0       	rjmp	.+358    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portB :
			SetBit(DDRB_REG , Copy_u8PinID);
     f18:	a7 e3       	ldi	r26, 0x37	; 55
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e7 e3       	ldi	r30, 0x37	; 55
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_voidSetPinDirection+0xa6>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_voidSetPinDirection+0xa2>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	9f c0       	rjmp	.+318    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portC :
			SetBit(DDRC_REG , Copy_u8PinID);
     f40:	a4 e3       	ldi	r26, 0x34	; 52
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_voidSetPinDirection+0xce>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_voidSetPinDirection+0xca>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	8b c0       	rjmp	.+278    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portD :
			SetBit(DDRD_REG , Copy_u8PinID);
     f68:	a1 e3       	ldi	r26, 0x31	; 49
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e1 e3       	ldi	r30, 0x31	; 49
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_voidSetPinDirection+0xf6>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_voidSetPinDirection+0xf2>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	77 c0       	rjmp	.+238    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
			break;
		}
	}
	        /*Input Mode*/
	else if (Copy_u8PinDirection == 0)
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 23       	and	r24, r24
     f94:	09 f0       	breq	.+2      	; 0xf98 <DIO_voidSetPinDirection+0x108>
     f96:	73 c0       	rjmp	.+230    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8PortID)
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3d 83       	std	Y+5, r19	; 0x05
     fa0:	2c 83       	std	Y+4, r18	; 0x04
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	91 05       	cpc	r25, r1
     faa:	59 f1       	breq	.+86     	; 0x1002 <DIO_voidSetPinDirection+0x172>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <DIO_voidSetPinDirection+0x130>
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f0       	breq	.+26     	; 0xfd8 <DIO_voidSetPinDirection+0x148>
     fbe:	5f c0       	rjmp	.+190    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	89 f1       	breq	.+98     	; 0x102c <DIO_voidSetPinDirection+0x19c>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	91 05       	cpc	r25, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <DIO_voidSetPinDirection+0x146>
     fd4:	40 c0       	rjmp	.+128    	; 0x1056 <DIO_voidSetPinDirection+0x1c6>
     fd6:	53 c0       	rjmp	.+166    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
		{
			case portA :
			ClrBit(DDRA_REG , Copy_u8PinID);
     fd8:	aa e3       	ldi	r26, 0x3A	; 58
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ea e3       	ldi	r30, 0x3A	; 58
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_voidSetPinDirection+0x166>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_voidSetPinDirection+0x162>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	3e c0       	rjmp	.+124    	; 0x107e <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portB :
			ClrBit(DDRB_REG , Copy_u8PinID);
    1002:	a7 e3       	ldi	r26, 0x37	; 55
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e7 e3       	ldi	r30, 0x37	; 55
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_voidSetPinDirection+0x190>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_voidSetPinDirection+0x18c>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	29 c0       	rjmp	.+82     	; 0x107e <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portC :
			ClrBit(DDRC_REG , Copy_u8PinID);
    102c:	a4 e3       	ldi	r26, 0x34	; 52
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e4 e3       	ldi	r30, 0x34	; 52
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_voidSetPinDirection+0x1ba>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_voidSetPinDirection+0x1b6>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	14 c0       	rjmp	.+40     	; 0x107e <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portD :
			ClrBit(DDRD_REG , Copy_u8PinID);
    1056:	a1 e3       	ldi	r26, 0x31	; 49
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e1 e3       	ldi	r30, 0x31	; 49
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_voidSetPinDirection+0x1e4>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_voidSetPinDirection+0x1e0>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
			break;
		}
	}
}
    107e:	27 96       	adiw	r28, 0x07	; 7
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_voidSetPinValue>:

//______________________________________Pin value________________________________________
// After determining pin direction , we need to determine if value high or low
void DIO_voidSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	27 97       	sbiw	r28, 0x07	; 7
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6a 83       	std	Y+2, r22	; 0x02
    10a8:	4b 83       	std	Y+3, r20	; 0x03
	        /*Output is high*/
	if(Copy_u8PinValue == 1)     
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <DIO_voidSetPinValue+0x22>
    10b0:	6f c0       	rjmp	.+222    	; 0x1190 <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_u8PortID)
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3f 83       	std	Y+7, r19	; 0x07
    10ba:	2e 83       	std	Y+6, r18	; 0x06
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	9f 81       	ldd	r25, Y+7	; 0x07
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	91 05       	cpc	r25, r1
    10c4:	49 f1       	breq	.+82     	; 0x1118 <DIO_voidSetPinValue+0x88>
    10c6:	2e 81       	ldd	r18, Y+6	; 0x06
    10c8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	2c f4       	brge	.+10     	; 0x10da <DIO_voidSetPinValue+0x4a>
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <DIO_voidSetPinValue+0x60>
    10d8:	d2 c0       	rjmp	.+420    	; 0x127e <DIO_voidSetPinValue+0x1ee>
    10da:	2e 81       	ldd	r18, Y+6	; 0x06
    10dc:	3f 81       	ldd	r19, Y+7	; 0x07
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	71 f1       	breq	.+92     	; 0x1140 <DIO_voidSetPinValue+0xb0>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	e9 f1       	breq	.+122    	; 0x1168 <DIO_voidSetPinValue+0xd8>
    10ee:	c7 c0       	rjmp	.+398    	; 0x127e <DIO_voidSetPinValue+0x1ee>
		{
			case portA :
			SetBit(PORTA_REG , Copy_u8PinID);
    10f0:	ab e3       	ldi	r26, 0x3B	; 59
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	eb e3       	ldi	r30, 0x3B	; 59
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_voidSetPinValue+0x7e>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_voidSetPinValue+0x7a>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	b3 c0       	rjmp	.+358    	; 0x127e <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portB :
			SetBit(PORTB_REG , Copy_u8PinID);
    1118:	a8 e3       	ldi	r26, 0x38	; 56
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e8 e3       	ldi	r30, 0x38	; 56
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_voidSetPinValue+0xa6>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_voidSetPinValue+0xa2>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	9f c0       	rjmp	.+318    	; 0x127e <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portC :
			SetBit(PORTC_REG , Copy_u8PinID);
    1140:	a5 e3       	ldi	r26, 0x35	; 53
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e3       	ldi	r30, 0x35	; 53
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_voidSetPinValue+0xce>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_voidSetPinValue+0xca>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	8b c0       	rjmp	.+278    	; 0x127e <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portD :
			SetBit(PORTD_REG , Copy_u8PinID);
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_voidSetPinValue+0xf6>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_voidSetPinValue+0xf2>
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	77 c0       	rjmp	.+238    	; 0x127e <DIO_voidSetPinValue+0x1ee>
			break;
		}
	}
	        /*Output is low*/
	else if (Copy_u8PinValue == 0)
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	88 23       	and	r24, r24
    1194:	09 f0       	breq	.+2      	; 0x1198 <DIO_voidSetPinValue+0x108>
    1196:	73 c0       	rjmp	.+230    	; 0x127e <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_u8PortID)
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3d 83       	std	Y+5, r19	; 0x05
    11a0:	2c 83       	std	Y+4, r18	; 0x04
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	9d 81       	ldd	r25, Y+5	; 0x05
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 05       	cpc	r25, r1
    11aa:	59 f1       	breq	.+86     	; 0x1202 <DIO_voidSetPinValue+0x172>
    11ac:	2c 81       	ldd	r18, Y+4	; 0x04
    11ae:	3d 81       	ldd	r19, Y+5	; 0x05
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <DIO_voidSetPinValue+0x130>
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	69 f0       	breq	.+26     	; 0x11d8 <DIO_voidSetPinValue+0x148>
    11be:	5f c0       	rjmp	.+190    	; 0x127e <DIO_voidSetPinValue+0x1ee>
    11c0:	2c 81       	ldd	r18, Y+4	; 0x04
    11c2:	3d 81       	ldd	r19, Y+5	; 0x05
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	89 f1       	breq	.+98     	; 0x122c <DIO_voidSetPinValue+0x19c>
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	91 05       	cpc	r25, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <DIO_voidSetPinValue+0x146>
    11d4:	40 c0       	rjmp	.+128    	; 0x1256 <DIO_voidSetPinValue+0x1c6>
    11d6:	53 c0       	rjmp	.+166    	; 0x127e <DIO_voidSetPinValue+0x1ee>
		{
			case portA :
			ClrBit(PORTA_REG , Copy_u8PinID);
    11d8:	ab e3       	ldi	r26, 0x3B	; 59
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	eb e3       	ldi	r30, 0x3B	; 59
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_voidSetPinValue+0x166>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_voidSetPinValue+0x162>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	3e c0       	rjmp	.+124    	; 0x127e <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portB :
			ClrBit(PORTB_REG , Copy_u8PinID);
    1202:	a8 e3       	ldi	r26, 0x38	; 56
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e8 e3       	ldi	r30, 0x38	; 56
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_voidSetPinValue+0x190>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_voidSetPinValue+0x18c>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	29 c0       	rjmp	.+82     	; 0x127e <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portC :
			ClrBit(PORTC_REG , Copy_u8PinID);
    122c:	a5 e3       	ldi	r26, 0x35	; 53
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e3       	ldi	r30, 0x35	; 53
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_voidSetPinValue+0x1ba>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_voidSetPinValue+0x1b6>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	14 c0       	rjmp	.+40     	; 0x127e <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portD :
			ClrBit(PORTD_REG , Copy_u8PinID);
    1256:	a2 e3       	ldi	r26, 0x32	; 50
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e2 e3       	ldi	r30, 0x32	; 50
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_voidSetPinValue+0x1e4>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_voidSetPinValue+0x1e0>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
			break;
		}
	}
}
    127e:	27 96       	adiw	r28, 0x07	; 7
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <DIO_voidSetPortDirection>:

//_____________________________________________Port direction__________________________________
void DIO_voidSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8PortDirection)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_voidSetPortDirection+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <DIO_voidSetPortDirection+0x8>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	6a 83       	std	Y+2, r22	; 0x02
	      /*Input or Output Mode*/
	switch(Copy_u8PortID)
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3c 83       	std	Y+4, r19	; 0x04
    12a8:	2b 83       	std	Y+3, r18	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	91 05       	cpc	r25, r1
    12b2:	d1 f0       	breq	.+52     	; 0x12e8 <DIO_voidSetPortDirection+0x58>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <DIO_voidSetPortDirection+0x38>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	61 f0       	breq	.+24     	; 0x12de <DIO_voidSetPortDirection+0x4e>
    12c6:	1e c0       	rjmp	.+60     	; 0x1304 <DIO_voidSetPortDirection+0x74>
    12c8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ca:	3c 81       	ldd	r19, Y+4	; 0x04
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	81 f0       	breq	.+32     	; 0x12f2 <DIO_voidSetPortDirection+0x62>
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	81 f0       	breq	.+32     	; 0x12fc <DIO_voidSetPortDirection+0x6c>
    12dc:	13 c0       	rjmp	.+38     	; 0x1304 <DIO_voidSetPortDirection+0x74>
	{
		case portA :
		DDRA_REG = Copy_u8PortDirection;
    12de:	ea e3       	ldi	r30, 0x3A	; 58
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	80 83       	st	Z, r24
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <DIO_voidSetPortDirection+0x74>
		break;
		
		case portB :
		DDRB_REG = Copy_u8PortDirection;
    12e8:	e7 e3       	ldi	r30, 0x37	; 55
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	80 83       	st	Z, r24
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <DIO_voidSetPortDirection+0x74>
		break;
		
		case portC :
		DDRC_REG = Copy_u8PortDirection;
    12f2:	e4 e3       	ldi	r30, 0x34	; 52
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <DIO_voidSetPortDirection+0x74>
		break;
		
		case portD :
		DDRD_REG = Copy_u8PortDirection;
    12fc:	e1 e3       	ldi	r30, 0x31	; 49
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
		break;
	}
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <DIO_voidSetPortValue>:

//_______________________________________________Port Value_________________________________________
void DIO_voidSetPortValue(u8 Copy_u8PortID , u8 Copy_u8PortValue)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <DIO_voidSetPortValue+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_voidSetPortValue+0x8>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6a 83       	std	Y+2, r22	; 0x02
	      /*Output port high or low*/
	switch(Copy_u8PortID)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3c 83       	std	Y+4, r19	; 0x04
    132a:	2b 83       	std	Y+3, r18	; 0x03
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	d1 f0       	breq	.+52     	; 0x136a <DIO_voidSetPortValue+0x58>
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <DIO_voidSetPortValue+0x38>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	61 f0       	breq	.+24     	; 0x1360 <DIO_voidSetPortValue+0x4e>
    1348:	1e c0       	rjmp	.+60     	; 0x1386 <DIO_voidSetPortValue+0x74>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <DIO_voidSetPortValue+0x62>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	81 f0       	breq	.+32     	; 0x137e <DIO_voidSetPortValue+0x6c>
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <DIO_voidSetPortValue+0x74>
	{
		case portA :
		PORTA_REG = Copy_u8PortValue;
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	0e c0       	rjmp	.+28     	; 0x1386 <DIO_voidSetPortValue+0x74>
		break;
		
		case portB :
		PORTB_REG = Copy_u8PortValue;
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <DIO_voidSetPortValue+0x74>
		break;
		
		case portC :
		PORTC_REG = Copy_u8PortValue;
    1374:	e5 e3       	ldi	r30, 0x35	; 53
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <DIO_voidSetPortValue+0x74>
		break;
		
		case portD :
		PORTD_REG = Copy_u8PortValue;
    137e:	e2 e3       	ldi	r30, 0x32	; 50
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
		break;
	}
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <DIO_voidTogglePinValue>:

//________________________________________________Toggle Pin_____________________________________
void DIO_voidTogglePinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_voidTogglePinValue+0x6>
    139a:	00 d0       	rcall	.+0      	; 0x139c <DIO_voidTogglePinValue+0x8>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3c 83       	std	Y+4, r19	; 0x04
    13ac:	2b 83       	std	Y+3, r18	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	49 f1       	breq	.+82     	; 0x140a <DIO_voidTogglePinValue+0x76>
    13b8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ba:	3c 81       	ldd	r19, Y+4	; 0x04
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <DIO_voidTogglePinValue+0x38>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <DIO_voidTogglePinValue+0x4e>
    13ca:	5a c0       	rjmp	.+180    	; 0x1480 <DIO_voidTogglePinValue+0xec>
    13cc:	2b 81       	ldd	r18, Y+3	; 0x03
    13ce:	3c 81       	ldd	r19, Y+4	; 0x04
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	71 f1       	breq	.+92     	; 0x1432 <DIO_voidTogglePinValue+0x9e>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	e9 f1       	breq	.+122    	; 0x145a <DIO_voidTogglePinValue+0xc6>
    13e0:	4f c0       	rjmp	.+158    	; 0x1480 <DIO_voidTogglePinValue+0xec>
	{
		case portA :
		ToggleBit(PORTA_REG , Copy_u8PinID);
    13e2:	ab e3       	ldi	r26, 0x3B	; 59
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e3       	ldi	r30, 0x3B	; 59
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_voidTogglePinValue+0x6c>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_voidTogglePinValue+0x68>
    1404:	84 27       	eor	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	3b c0       	rjmp	.+118    	; 0x1480 <DIO_voidTogglePinValue+0xec>
		break;
		
		case portB :
		ToggleBit(PORTB_REG , Copy_u8PinID);
    140a:	a8 e3       	ldi	r26, 0x38	; 56
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e8 e3       	ldi	r30, 0x38	; 56
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_voidTogglePinValue+0x94>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_voidTogglePinValue+0x90>
    142c:	84 27       	eor	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	27 c0       	rjmp	.+78     	; 0x1480 <DIO_voidTogglePinValue+0xec>
		break;
		
		case portC :
		ToggleBit(PORTC_REG , Copy_u8PinID);
    1432:	a5 e3       	ldi	r26, 0x35	; 53
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e3       	ldi	r30, 0x35	; 53
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_voidTogglePinValue+0xbc>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_voidTogglePinValue+0xb8>
    1454:	84 27       	eor	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <DIO_voidTogglePinValue+0xec>
		break;
		
		case portD :
		ToggleBit(PORTD_REG , Copy_u8PinID);
    145a:	a2 e3       	ldi	r26, 0x32	; 50
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e2 e3       	ldi	r30, 0x32	; 50
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_voidTogglePinValue+0xe4>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_voidTogglePinValue+0xe0>
    147c:	84 27       	eor	r24, r20
    147e:	8c 93       	st	X, r24
		break;
	}
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <DIO_u8GetPinValue>:

//_______________________________________________Get pin________________________________________
u8 DIO_u8GetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_u8GetPinValue+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_u8GetPinValue+0x8>
    1496:	0f 92       	push	r0
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Copy_u8PinValue;
	switch(Copy_u8PortID)
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3d 83       	std	Y+5, r19	; 0x05
    14a8:	2c 83       	std	Y+4, r18	; 0x04
    14aa:	4c 81       	ldd	r20, Y+4	; 0x04
    14ac:	5d 81       	ldd	r21, Y+5	; 0x05
    14ae:	41 30       	cpi	r20, 0x01	; 1
    14b0:	51 05       	cpc	r21, r1
    14b2:	41 f1       	breq	.+80     	; 0x1504 <DIO_u8GetPinValue+0x76>
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	34 f4       	brge	.+12     	; 0x14ca <DIO_u8GetPinValue+0x3c>
    14be:	2c 81       	ldd	r18, Y+4	; 0x04
    14c0:	3d 81       	ldd	r19, Y+5	; 0x05
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <DIO_u8GetPinValue+0x52>
    14c8:	52 c0       	rjmp	.+164    	; 0x156e <DIO_u8GetPinValue+0xe0>
    14ca:	4c 81       	ldd	r20, Y+4	; 0x04
    14cc:	5d 81       	ldd	r21, Y+5	; 0x05
    14ce:	42 30       	cpi	r20, 0x02	; 2
    14d0:	51 05       	cpc	r21, r1
    14d2:	51 f1       	breq	.+84     	; 0x1528 <DIO_u8GetPinValue+0x9a>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	b9 f1       	breq	.+110    	; 0x154c <DIO_u8GetPinValue+0xbe>
    14de:	47 c0       	rjmp	.+142    	; 0x156e <DIO_u8GetPinValue+0xe0>
	{
		case portA :
		Copy_u8PinValue = GetBit(PINA_REG , Copy_u8PinID);
    14e0:	e9 e3       	ldi	r30, 0x39	; 57
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8GetPinValue+0x6a>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8GetPinValue+0x66>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	35 c0       	rjmp	.+106    	; 0x156e <DIO_u8GetPinValue+0xe0>
		break;
		
		case portB :
		Copy_u8PinValue = GetBit(PINB_REG , Copy_u8PinID);
    1504:	e6 e3       	ldi	r30, 0x36	; 54
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_u8GetPinValue+0x8e>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_u8GetPinValue+0x8a>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	23 c0       	rjmp	.+70     	; 0x156e <DIO_u8GetPinValue+0xe0>
		break;
		
		case portC :
		Copy_u8PinValue = GetBit(PINC_REG , Copy_u8PinID);
    1528:	e3 e3       	ldi	r30, 0x33	; 51
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a9 01       	movw	r20, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_u8GetPinValue+0xb2>
    153c:	55 95       	asr	r21
    153e:	47 95       	ror	r20
    1540:	8a 95       	dec	r24
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_u8GetPinValue+0xae>
    1544:	ca 01       	movw	r24, r20
    1546:	81 70       	andi	r24, 0x01	; 1
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	11 c0       	rjmp	.+34     	; 0x156e <DIO_u8GetPinValue+0xe0>
		break;
		
		case portD :
		Copy_u8PinValue = GetBit(PIND_REG , Copy_u8PinID);
    154c:	e0 e3       	ldi	r30, 0x30	; 48
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_u8GetPinValue+0xd6>
    1560:	55 95       	asr	r21
    1562:	47 95       	ror	r20
    1564:	8a 95       	dec	r24
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_u8GetPinValue+0xd2>
    1568:	ca 01       	movw	r24, r20
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Copy_u8PinValue;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <EXT_voidGIE_Enable>:
#include "DIO_Interface.h"
#include "GIE_Private.h"
#include "GIE_Interface.h"

void EXT_voidGIE_Enable(void)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG , pin7);
    1588:	af e5       	ldi	r26, 0x5F	; 95
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ef e5       	ldi	r30, 0x5F	; 95
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	8c 93       	st	X, r24
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <EXT_voidGIE_Disable>:

void EXT_voidGIE_Disable(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	ClrBit(SREG , pin7);
    15a4:	af e5       	ldi	r26, 0x5F	; 95
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e5       	ldi	r30, 0x5F	; 95
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 77       	andi	r24, 0x7F	; 127
    15b0:	8c 93       	st	X, r24
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <LCD_voidInitialize>:
#include "LCD_Interface.h"
#include "util/delay.h"

//___________________________________________initialize LCD____________________________________
void LCD_voidInitialize(void)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	aa 97       	sbiw	r28, 0x2a	; 42
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
	 /*set pin direction (called only one time)*/
	DIO_voidSetPinDirection(RS_Write_EN_port , RS , pin_output);     //RS
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RS_Write_EN_port , Write , pin_output);     //R/W
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RS_Write_EN_port , EN , pin_output);     //Enable
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
	          /*set port direction*/
	DIO_voidSetPortDirection(LCD_port , All_port_output);
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	6f ef       	ldi	r22, 0xFF	; 255
    15ee:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_voidSetPortDirection>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 ef       	ldi	r26, 0xF0	; 240
    15f8:	b1 e4       	ldi	r27, 0x41	; 65
    15fa:	8f a3       	std	Y+39, r24	; 0x27
    15fc:	98 a7       	std	Y+40, r25	; 0x28
    15fe:	a9 a7       	std	Y+41, r26	; 0x29
    1600:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	6f a1       	ldd	r22, Y+39	; 0x27
    1604:	78 a5       	ldd	r23, Y+40	; 0x28
    1606:	89 a5       	ldd	r24, Y+41	; 0x29
    1608:	9a a5       	ldd	r25, Y+42	; 0x2a
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a ef       	ldi	r20, 0xFA	; 250
    1610:	54 e4       	ldi	r21, 0x44	; 68
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8b a3       	std	Y+35, r24	; 0x23
    161c:	9c a3       	std	Y+36, r25	; 0x24
    161e:	ad a3       	std	Y+37, r26	; 0x25
    1620:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1622:	6b a1       	ldd	r22, Y+35	; 0x23
    1624:	7c a1       	ldd	r23, Y+36	; 0x24
    1626:	8d a1       	ldd	r24, Y+37	; 0x25
    1628:	9e a1       	ldd	r25, Y+38	; 0x26
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	2c f4       	brge	.+10     	; 0x1644 <LCD_voidInitialize+0x8c>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <LCD_voidInitialize+0x10a>
	else if (__tmp > 65535)
    1644:	6b a1       	ldd	r22, Y+35	; 0x23
    1646:	7c a1       	ldd	r23, Y+36	; 0x24
    1648:	8d a1       	ldd	r24, Y+37	; 0x25
    164a:	9e a1       	ldd	r25, Y+38	; 0x26
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <LCD_voidInitialize+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	6f a1       	ldd	r22, Y+39	; 0x27
    165e:	78 a5       	ldd	r23, Y+40	; 0x28
    1660:	89 a5       	ldd	r24, Y+41	; 0x29
    1662:	9a a5       	ldd	r25, Y+42	; 0x2a
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9a a3       	std	Y+34, r25	; 0x22
    1682:	89 a3       	std	Y+33, r24	; 0x21
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <LCD_voidInitialize+0xec>
    1686:	88 ec       	ldi	r24, 0xC8	; 200
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	98 a3       	std	Y+32, r25	; 0x20
    168c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    168e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1690:	98 a1       	ldd	r25, Y+32	; 0x20
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_voidInitialize+0xda>
    1696:	98 a3       	std	Y+32, r25	; 0x20
    1698:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	89 a1       	ldd	r24, Y+33	; 0x21
    169c:	9a a1       	ldd	r25, Y+34	; 0x22
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9a a3       	std	Y+34, r25	; 0x22
    16a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	89 a1       	ldd	r24, Y+33	; 0x21
    16a6:	9a a1       	ldd	r25, Y+34	; 0x22
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <LCD_voidInitialize+0xce>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <LCD_voidInitialize+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6b a1       	ldd	r22, Y+35	; 0x23
    16b0:	7c a1       	ldd	r23, Y+36	; 0x24
    16b2:	8d a1       	ldd	r24, Y+37	; 0x25
    16b4:	9e a1       	ldd	r25, Y+38	; 0x26
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9a a3       	std	Y+34, r25	; 0x22
    16c0:	89 a3       	std	Y+33, r24	; 0x21
    16c2:	89 a1       	ldd	r24, Y+33	; 0x21
    16c4:	9a a1       	ldd	r25, Y+34	; 0x22
    16c6:	9e 8f       	std	Y+30, r25	; 0x1e
    16c8:	8d 8f       	std	Y+29, r24	; 0x1d
    16ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LCD_voidInitialize+0x116>
    16d2:	9e 8f       	std	Y+30, r25	; 0x1e
    16d4:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(30);
    LCD_voidWriteCommand(FunctionSet);     //send command function set
    16d6:	88 e3       	ldi	r24, 0x38	; 56
    16d8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_voidWriteCommand>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e0       	ldi	r26, 0x00	; 0
    16e2:	b0 e4       	ldi	r27, 0x40	; 64
    16e4:	89 8f       	std	Y+25, r24	; 0x19
    16e6:	9a 8f       	std	Y+26, r25	; 0x1a
    16e8:	ab 8f       	std	Y+27, r26	; 0x1b
    16ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ec:	69 8d       	ldd	r22, Y+25	; 0x19
    16ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a ef       	ldi	r20, 0xFA	; 250
    16fa:	54 e4       	ldi	r21, 0x44	; 68
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	8d 8b       	std	Y+21, r24	; 0x15
    1706:	9e 8b       	std	Y+22, r25	; 0x16
    1708:	af 8b       	std	Y+23, r26	; 0x17
    170a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e8       	ldi	r20, 0x80	; 128
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1720:	88 23       	and	r24, r24
    1722:	2c f4       	brge	.+10     	; 0x172e <LCD_voidInitialize+0x176>
		__ticks = 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9c 8b       	std	Y+20, r25	; 0x14
    172a:	8b 8b       	std	Y+19, r24	; 0x13
    172c:	3f c0       	rjmp	.+126    	; 0x17ac <LCD_voidInitialize+0x1f4>
	else if (__tmp > 65535)
    172e:	6d 89       	ldd	r22, Y+21	; 0x15
    1730:	7e 89       	ldd	r23, Y+22	; 0x16
    1732:	8f 89       	ldd	r24, Y+23	; 0x17
    1734:	98 8d       	ldd	r25, Y+24	; 0x18
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	57 e4       	ldi	r21, 0x47	; 71
    173e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1742:	18 16       	cp	r1, r24
    1744:	4c f5       	brge	.+82     	; 0x1798 <LCD_voidInitialize+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	69 8d       	ldd	r22, Y+25	; 0x19
    1748:	7a 8d       	ldd	r23, Y+26	; 0x1a
    174a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    174c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9c 8b       	std	Y+20, r25	; 0x14
    176c:	8b 8b       	std	Y+19, r24	; 0x13
    176e:	0f c0       	rjmp	.+30     	; 0x178e <LCD_voidInitialize+0x1d6>
    1770:	88 ec       	ldi	r24, 0xC8	; 200
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9a 8b       	std	Y+18, r25	; 0x12
    1776:	89 8b       	std	Y+17, r24	; 0x11
    1778:	89 89       	ldd	r24, Y+17	; 0x11
    177a:	9a 89       	ldd	r25, Y+18	; 0x12
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_voidInitialize+0x1c4>
    1780:	9a 8b       	std	Y+18, r25	; 0x12
    1782:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1784:	8b 89       	ldd	r24, Y+19	; 0x13
    1786:	9c 89       	ldd	r25, Y+20	; 0x14
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9c 8b       	std	Y+20, r25	; 0x14
    178c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	8b 89       	ldd	r24, Y+19	; 0x13
    1790:	9c 89       	ldd	r25, Y+20	; 0x14
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	69 f7       	brne	.-38     	; 0x1770 <LCD_voidInitialize+0x1b8>
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <LCD_voidInitialize+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	6d 89       	ldd	r22, Y+21	; 0x15
    179a:	7e 89       	ldd	r23, Y+22	; 0x16
    179c:	8f 89       	ldd	r24, Y+23	; 0x17
    179e:	98 8d       	ldd	r25, Y+24	; 0x18
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9c 8b       	std	Y+20, r25	; 0x14
    17aa:	8b 8b       	std	Y+19, r24	; 0x13
    17ac:	8b 89       	ldd	r24, Y+19	; 0x13
    17ae:	9c 89       	ldd	r25, Y+20	; 0x14
    17b0:	98 8b       	std	Y+16, r25	; 0x10
    17b2:	8f 87       	std	Y+15, r24	; 0x0f
    17b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b6:	98 89       	ldd	r25, Y+16	; 0x10
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_voidInitialize+0x200>
    17bc:	98 8b       	std	Y+16, r25	; 0x10
    17be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidWriteCommand(Display_ON_OFF);     //send command display on/off
    17c0:	8c e0       	ldi	r24, 0x0C	; 12
    17c2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_voidWriteCommand>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e4       	ldi	r27, 0x40	; 64
    17ce:	8b 87       	std	Y+11, r24	; 0x0b
    17d0:	9c 87       	std	Y+12, r25	; 0x0c
    17d2:	ad 87       	std	Y+13, r26	; 0x0d
    17d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17da:	8d 85       	ldd	r24, Y+13	; 0x0d
    17dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	4a ef       	ldi	r20, 0xFA	; 250
    17e4:	54 e4       	ldi	r21, 0x44	; 68
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8f 83       	std	Y+7, r24	; 0x07
    17f0:	98 87       	std	Y+8, r25	; 0x08
    17f2:	a9 87       	std	Y+9, r26	; 0x09
    17f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e8       	ldi	r20, 0x80	; 128
    1804:	5f e3       	ldi	r21, 0x3F	; 63
    1806:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180a:	88 23       	and	r24, r24
    180c:	2c f4       	brge	.+10     	; 0x1818 <LCD_voidInitialize+0x260>
		__ticks = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <LCD_voidInitialize+0x2de>
	else if (__tmp > 65535)
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	57 e4       	ldi	r21, 0x47	; 71
    1828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182c:	18 16       	cp	r1, r24
    182e:	4c f5       	brge	.+82     	; 0x1882 <LCD_voidInitialize+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1830:	6b 85       	ldd	r22, Y+11	; 0x0b
    1832:	7c 85       	ldd	r23, Y+12	; 0x0c
    1834:	8d 85       	ldd	r24, Y+13	; 0x0d
    1836:	9e 85       	ldd	r25, Y+14	; 0x0e
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e2       	ldi	r20, 0x20	; 32
    183e:	51 e4       	ldi	r21, 0x41	; 65
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <LCD_voidInitialize+0x2c0>
    185a:	88 ec       	ldi	r24, 0xC8	; 200
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9c 83       	std	Y+4, r25	; 0x04
    1860:	8b 83       	std	Y+3, r24	; 0x03
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_voidInitialize+0x2ae>
    186a:	9c 83       	std	Y+4, r25	; 0x04
    186c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186e:	8d 81       	ldd	r24, Y+5	; 0x05
    1870:	9e 81       	ldd	r25, Y+6	; 0x06
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	9e 83       	std	Y+6, r25	; 0x06
    1876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	69 f7       	brne	.-38     	; 0x185a <LCD_voidInitialize+0x2a2>
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <LCD_voidInitialize+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1882:	6f 81       	ldd	r22, Y+7	; 0x07
    1884:	78 85       	ldd	r23, Y+8	; 0x08
    1886:	89 85       	ldd	r24, Y+9	; 0x09
    1888:	9a 85       	ldd	r25, Y+10	; 0x0a
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9e 83       	std	Y+6, r25	; 0x06
    1894:	8d 83       	std	Y+5, r24	; 0x05
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_voidInitialize+0x2ea>
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCommand(CLR_Display);     //send command clear display
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_voidWriteCommand>
}
    18b0:	aa 96       	adiw	r28, 0x2a	; 42
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <LCD_voidWriteCommand>:
//___________________________________________write command____________________________________-
void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	2f 97       	sbiw	r28, 0x0f	; 15
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 0*/
	DIO_voidSetPinValue(RS_Write_EN_port , RS , pin_low);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	/*R/W = 0*/
	DIO_voidSetPinValue(RS_Write_EN_port , Write , pin_low);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	/*send command*/
	DIO_voidSetPortValue(LCD_port , Copy_u8Command);
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    18f0:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_voidSetPortValue>
	/*Enable pulse*/
	DIO_voidSetPinValue(RS_Write_EN_port , EN , pin_high);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	62 e0       	ldi	r22, 0x02	; 2
    18f8:	41 e0       	ldi	r20, 0x01	; 1
    18fa:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 e0       	ldi	r26, 0x00	; 0
    1904:	b0 e4       	ldi	r27, 0x40	; 64
    1906:	8b 87       	std	Y+11, r24	; 0x0b
    1908:	9c 87       	std	Y+12, r25	; 0x0c
    190a:	ad 87       	std	Y+13, r26	; 0x0d
    190c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1910:	7c 85       	ldd	r23, Y+12	; 0x0c
    1912:	8d 85       	ldd	r24, Y+13	; 0x0d
    1914:	9e 85       	ldd	r25, Y+14	; 0x0e
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a ef       	ldi	r20, 0xFA	; 250
    191c:	54 e4       	ldi	r21, 0x44	; 68
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	8f 83       	std	Y+7, r24	; 0x07
    1928:	98 87       	std	Y+8, r25	; 0x08
    192a:	a9 87       	std	Y+9, r26	; 0x09
    192c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192e:	6f 81       	ldd	r22, Y+7	; 0x07
    1930:	78 85       	ldd	r23, Y+8	; 0x08
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	9a 85       	ldd	r25, Y+10	; 0x0a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	2c f4       	brge	.+10     	; 0x1950 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	4c f5       	brge	.+82     	; 0x19ba <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	6b 85       	ldd	r22, Y+11	; 0x0b
    196a:	7c 85       	ldd	r23, Y+12	; 0x0c
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <LCD_voidWriteCommand+0xee>
    1992:	88 ec       	ldi	r24, 0xC8	; 200
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_voidWriteCommand+0xdc>
    19a2:	9c 83       	std	Y+4, r25	; 0x04
    19a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	9e 83       	std	Y+6, r25	; 0x06
    19ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f7       	brne	.-38     	; 0x1992 <LCD_voidWriteCommand+0xd0>
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_voidWriteCommand+0x118>
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(RS_Write_EN_port , EN , pin_low);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	62 e0       	ldi	r22, 0x02	; 2
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
}
    19ec:	2f 96       	adiw	r28, 0x0f	; 15
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <LCD_voidWriteData>:

//____________________________________________write data______________________________________
void LCD_voidWriteData(u8 Copy_u8Data)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	2f 97       	sbiw	r28, 0x0f	; 15
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 1*/
	DIO_voidSetPinValue(RS_Write_EN_port , RS , pin_high);
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	/*R/W = 0*/
	DIO_voidSetPinValue(RS_Write_EN_port , Write , pin_low);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	/*send data*/
	DIO_voidSetPortValue(LCD_port , Copy_u8Data);
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a2c:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_voidSetPortValue>
	/*Enable pulse*/
	DIO_voidSetPinValue(RS_Write_EN_port , EN , pin_high);
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e4       	ldi	r27, 0x40	; 64
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
    1a44:	9c 87       	std	Y+12, r25	; 0x0c
    1a46:	ad 87       	std	Y+13, r26	; 0x0d
    1a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a ef       	ldi	r20, 0xFA	; 250
    1a58:	54 e4       	ldi	r21, 0x44	; 68
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8f 83       	std	Y+7, r24	; 0x07
    1a64:	98 87       	std	Y+8, r25	; 0x08
    1a66:	a9 87       	std	Y+9, r26	; 0x09
    1a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <LCD_voidWriteData+0x8e>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_voidWriteData+0xee>
    1ace:	88 ec       	ldi	r24, 0xC8	; 200
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_voidWriteData+0xdc>
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_voidWriteData+0xd0>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_voidWriteData+0x118>
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(RS_Write_EN_port , EN , pin_low);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	62 e0       	ldi	r22, 0x02	; 2
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
}
    1b28:	2f 96       	adiw	r28, 0x0f	; 15
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <LCD_voidGoToXY>:
//__________________________________________specify position___________________________________
void LCD_voidGoToXY(u8 Copy_u8Digits , u8 Copy_u8Line)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <LCD_voidGoToXY+0x6>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Line == 1)
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <LCD_voidGoToXY+0x1e>
	{
		LCD_voidWriteCommand( DDRAM_Address + Copy_u8Digits );
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	80 58       	subi	r24, 0x80	; 128
    1b52:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_voidWriteCommand>
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <LCD_voidGoToXY+0x2c>
	}

	else if(Copy_u8Line == 2)
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	21 f4       	brne	.+8      	; 0x1b66 <LCD_voidGoToXY+0x2c>
	{
		LCD_voidWriteCommand( DDRAM_Address + LineOne + Copy_u8Digits );
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	80 54       	subi	r24, 0x40	; 64
    1b62:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_voidWriteCommand>
	}
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <LCD_voidString>:
//____________________________________________display string____________________________________
void LCD_voidString(u8 * Copy_u8Data)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <LCD_voidString+0x6>
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	0a c0       	rjmp	.+20     	; 0x1b94 <LCD_voidString+0x24>
	while( (*Copy_u8Data) != '\0' )
	{
		LCD_voidWriteData(*Copy_u8Data);
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	80 81       	ld	r24, Z
    1b86:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_voidWriteData>
		Copy_u8Data++;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	}
}
//____________________________________________display string____________________________________
void LCD_voidString(u8 * Copy_u8Data)
{
	while( (*Copy_u8Data) != '\0' )
    1b94:	e9 81       	ldd	r30, Y+1	; 0x01
    1b96:	fa 81       	ldd	r31, Y+2	; 0x02
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 23       	and	r24, r24
    1b9c:	89 f7       	brne	.-30     	; 0x1b80 <LCD_voidString+0x10>
	{
		LCD_voidWriteData(*Copy_u8Data);
		Copy_u8Data++;
	}
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <LCD_voidNumbers>:
//____________________________________________display numbers_________________________________
void LCD_voidNumbers(u32 Copy_u32Number)
{
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	65 97       	sbiw	r28, 0x15	; 21
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	6a 8b       	std	Y+18, r22	; 0x12
    1bc2:	7b 8b       	std	Y+19, r23	; 0x13
    1bc4:	8c 8b       	std	Y+20, r24	; 0x14
    1bc6:	9d 8b       	std	Y+21, r25	; 0x15
		u8 arr[15];
		u8 digits = 0;
    1bc8:	1a 82       	std	Y+2, r1	; 0x02
    1bca:	2e c0       	rjmp	.+92     	; 0x1c28 <LCD_voidNumbers+0x80>
		while(Copy_u32Number != 0)
		{
			arr[digits] = (Copy_u32Number % 10) + ZeroASCIICode ;
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	08 2f       	mov	r16, r24
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
    1bd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bd4:	9b 89       	ldd	r25, Y+19	; 0x13
    1bd6:	ac 89       	ldd	r26, Y+20	; 0x14
    1bd8:	bd 89       	ldd	r27, Y+21	; 0x15
    1bda:	2a e0       	ldi	r18, 0x0A	; 10
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 b0 14 	call	0x2960	; 0x2960 <__udivmodsi4>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	28 2f       	mov	r18, r24
    1bf0:	20 5d       	subi	r18, 0xD0	; 208
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	03 96       	adiw	r24, 0x03	; 3
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	e0 0f       	add	r30, r16
    1bfa:	f1 1f       	adc	r31, r17
    1bfc:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    1bfe:	8a 89       	ldd	r24, Y+18	; 0x12
    1c00:	9b 89       	ldd	r25, Y+19	; 0x13
    1c02:	ac 89       	ldd	r26, Y+20	; 0x14
    1c04:	bd 89       	ldd	r27, Y+21	; 0x15
    1c06:	2a e0       	ldi	r18, 0x0A	; 10
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 b0 14 	call	0x2960	; 0x2960 <__udivmodsi4>
    1c16:	da 01       	movw	r26, r20
    1c18:	c9 01       	movw	r24, r18
    1c1a:	8a 8b       	std	Y+18, r24	; 0x12
    1c1c:	9b 8b       	std	Y+19, r25	; 0x13
    1c1e:	ac 8b       	std	Y+20, r26	; 0x14
    1c20:	bd 8b       	std	Y+21, r27	; 0x15
			digits++;
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	8f 5f       	subi	r24, 0xFF	; 255
    1c26:	8a 83       	std	Y+2, r24	; 0x02
//____________________________________________display numbers_________________________________
void LCD_voidNumbers(u32 Copy_u32Number)
{
		u8 arr[15];
		u8 digits = 0;
		while(Copy_u32Number != 0)
    1c28:	8a 89       	ldd	r24, Y+18	; 0x12
    1c2a:	9b 89       	ldd	r25, Y+19	; 0x13
    1c2c:	ac 89       	ldd	r26, Y+20	; 0x14
    1c2e:	bd 89       	ldd	r27, Y+21	; 0x15
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	a1 05       	cpc	r26, r1
    1c34:	b1 05       	cpc	r27, r1
    1c36:	51 f6       	brne	.-108    	; 0x1bcc <LCD_voidNumbers+0x24>
		{
			arr[digits] = (Copy_u32Number % 10) + ZeroASCIICode ;
			Copy_u32Number /= 10 ;
			digits++;
		}
		for(s8 j=digits-1 ; j>=0 ; j--)
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	81 50       	subi	r24, 0x01	; 1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	10 c0       	rjmp	.+32     	; 0x1c60 <LCD_voidNumbers+0xb8>
		{
			LCD_voidWriteData(arr[j]);
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	28 2f       	mov	r18, r24
    1c44:	33 27       	eor	r19, r19
    1c46:	27 fd       	sbrc	r18, 7
    1c48:	30 95       	com	r19
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	03 96       	adiw	r24, 0x03	; 3
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e2 0f       	add	r30, r18
    1c52:	f3 1f       	adc	r31, r19
    1c54:	80 81       	ld	r24, Z
    1c56:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_voidWriteData>
		{
			arr[digits] = (Copy_u32Number % 10) + ZeroASCIICode ;
			Copy_u32Number /= 10 ;
			digits++;
		}
		for(s8 j=digits-1 ; j>=0 ; j--)
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	81 50       	subi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	88 23       	and	r24, r24
    1c64:	6c f7       	brge	.-38     	; 0x1c40 <LCD_voidNumbers+0x98>
		{
			LCD_voidWriteData(arr[j]);
		}
}
    1c66:	65 96       	adiw	r28, 0x15	; 21
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	08 95       	ret

00001c7c <LCD_voidWriteSpecialCharacter>:
//_____________________________________________write special character_________________________
void LCD_voidWriteSpecialCharacter(u8 *pattern , u8 Copy_u8Character , u8 Col , u8 Row)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <LCD_voidWriteSpecialCharacter+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <LCD_voidWriteSpecialCharacter+0x8>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <LCD_voidWriteSpecialCharacter+0xa>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9b 83       	std	Y+3, r25	; 0x03
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	6c 83       	std	Y+4, r22	; 0x04
    1c90:	4d 83       	std	Y+5, r20	; 0x05
    1c92:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidWriteCommand(64 + (Copy_u8Character*8));     //CGRAM_Address
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	08 96       	adiw	r24, 0x08	; 8
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_voidWriteCommand>
	for(u8 i=0 ; i<8 ; i++)
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	0e c0       	rjmp	.+28     	; 0x1ccc <LCD_voidWriteSpecialCharacter+0x50>
	{
		LCD_voidWriteData(pattern[i]);
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	fc 01       	movw	r30, r24
    1cbc:	e2 0f       	add	r30, r18
    1cbe:	f3 1f       	adc	r31, r19
    1cc0:	80 81       	ld	r24, Z
    1cc2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_voidWriteData>
}
//_____________________________________________write special character_________________________
void LCD_voidWriteSpecialCharacter(u8 *pattern , u8 Copy_u8Character , u8 Col , u8 Row)
{
	LCD_voidWriteCommand(64 + (Copy_u8Character*8));     //CGRAM_Address
	for(u8 i=0 ; i<8 ; i++)
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 30       	cpi	r24, 0x08	; 8
    1cd0:	78 f3       	brcs	.-34     	; 0x1cb0 <LCD_voidWriteSpecialCharacter+0x34>
	{
		LCD_voidWriteData(pattern[i]);
	}
	LCD_voidGoToXY(Col , Row);
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	6e 81       	ldd	r22, Y+6	; 0x06
    1cd6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_voidGoToXY>
	LCD_voidWriteData(Copy_u8Character);
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_voidWriteData>
}
    1ce0:	26 96       	adiw	r28, 0x06	; 6
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <LCD_voidClear>:

//_______________________________________________Clear LCD_____________________________________
void LCD_voidClear(void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(CLR_Display);
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_voidWriteCommand>
}
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <TMR0_SetCallBack>:
#include "TMR0_Interface.h"

void (*GlobalPtr)(void) = '\0';

void TMR0_SetCallBack(void (*Ptr)(void))
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <TMR0_SetCallBack+0x6>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
	GlobalPtr = Ptr;
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	90 93 bd 00 	sts	0x00BD, r25
    1d1c:	80 93 bc 00 	sts	0x00BC, r24
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <TMR0_voidInit>:

void TMR0_voidInit(void)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
#if TMR0_Prescaler == TMR0_NO_Prescaler
	SetBit(TCCR0 , CS00);
	ClrBit(TCCR0 , CS01);
	ClrBit(TCCR0 , CS02);
#elif TMR0_Prescaler == TMR0_Prescaler_8
	ClrBit(TCCR0 , CS00);
    1d32:	a3 e5       	ldi	r26, 0x53	; 83
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e3 e5       	ldi	r30, 0x53	; 83
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8e 7f       	andi	r24, 0xFE	; 254
    1d3e:	8c 93       	st	X, r24
	SetBit(TCCR0 , CS01);
    1d40:	a3 e5       	ldi	r26, 0x53	; 83
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e3 e5       	ldi	r30, 0x53	; 83
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	82 60       	ori	r24, 0x02	; 2
    1d4c:	8c 93       	st	X, r24
	ClrBit(TCCR0 , CS02);
    1d4e:	a3 e5       	ldi	r26, 0x53	; 83
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e3 e5       	ldi	r30, 0x53	; 83
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8b 7f       	andi	r24, 0xFB	; 251
    1d5a:	8c 93       	st	X, r24
	SetBit(TCCR0 , COM00);
	ClrBit(TCCR0 , COM01);
	/*Output Compare Match Interrupt Enable*/
	SetBit(TIMSK , OCIE0);
#elif TMR0_Mode == FastPWM
	SetBit(TCCR0 , WGM01);
    1d5c:	a3 e5       	ldi	r26, 0x53	; 83
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e3 e5       	ldi	r30, 0x53	; 83
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	88 60       	ori	r24, 0x08	; 8
    1d68:	8c 93       	st	X, r24
	SetBit(TCCR0 , WGM00);
    1d6a:	a3 e5       	ldi	r26, 0x53	; 83
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e3 e5       	ldi	r30, 0x53	; 83
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	80 64       	ori	r24, 0x40	; 64
    1d76:	8c 93       	st	X, r24
	/*************OC0 Compare match*********/
	ClrBit(TCCR0 , COM00);
    1d78:	a3 e5       	ldi	r26, 0x53	; 83
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e3 e5       	ldi	r30, 0x53	; 83
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	8f 7e       	andi	r24, 0xEF	; 239
    1d84:	8c 93       	st	X, r24
	SetBit(TCCR0 , COM01);
    1d86:	a3 e5       	ldi	r26, 0x53	; 83
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e3 e5       	ldi	r30, 0x53	; 83
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 62       	ori	r24, 0x20	; 32
    1d92:	8c 93       	st	X, r24
#endif

}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <TMR0_voidOCR0>:

void TMR0_voidOCR0(u16 Copy_u16OCR0Value)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <TMR0_voidOCR0+0x6>
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u16OCR0Value;
    1da8:	ec e5       	ldi	r30, 0x5C	; 92
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	80 83       	st	Z, r24
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <TMR0_voidPreload>:


void TMR0_voidPreload(u16 Copy_u16Value)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <TMR0_voidPreload+0x6>
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u16Value;
    1dc8:	e2 e5       	ldi	r30, 0x52	; 82
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	80 83       	st	Z, r24
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <__vector_11>:


void __vector_11()__attribute__((signal));
void __vector_11()
{
    1dda:	1f 92       	push	r1
    1ddc:	0f 92       	push	r0
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	0f 92       	push	r0
    1de2:	11 24       	eor	r1, r1
    1de4:	2f 93       	push	r18
    1de6:	3f 93       	push	r19
    1de8:	4f 93       	push	r20
    1dea:	5f 93       	push	r21
    1dec:	6f 93       	push	r22
    1dee:	7f 93       	push	r23
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	af 93       	push	r26
    1df6:	bf 93       	push	r27
    1df8:	ef 93       	push	r30
    1dfa:	ff 93       	push	r31
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
	static u16 count = 0;
	if (count == 3907)
    1e04:	80 91 be 00 	lds	r24, 0x00BE
    1e08:	90 91 bf 00 	lds	r25, 0x00BF
    1e0c:	2f e0       	ldi	r18, 0x0F	; 15
    1e0e:	83 34       	cpi	r24, 0x43	; 67
    1e10:	92 07       	cpc	r25, r18
    1e12:	81 f4       	brne	.+32     	; 0x1e34 <__vector_11+0x5a>
	{
		if(GlobalPtr != '\0')
    1e14:	80 91 bc 00 	lds	r24, 0x00BC
    1e18:	90 91 bd 00 	lds	r25, 0x00BD
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	99 f0       	breq	.+38     	; 0x1e46 <__vector_11+0x6c>
		{
		    GlobalPtr();
    1e20:	e0 91 bc 00 	lds	r30, 0x00BC
    1e24:	f0 91 bd 00 	lds	r31, 0x00BD
    1e28:	09 95       	icall
		    count = 0;
    1e2a:	10 92 bf 00 	sts	0x00BF, r1
    1e2e:	10 92 be 00 	sts	0x00BE, r1
    1e32:	09 c0       	rjmp	.+18     	; 0x1e46 <__vector_11+0x6c>
		}
	}
	else
	{
		count ++;
    1e34:	80 91 be 00 	lds	r24, 0x00BE
    1e38:	90 91 bf 00 	lds	r25, 0x00BF
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	90 93 bf 00 	sts	0x00BF, r25
    1e42:	80 93 be 00 	sts	0x00BE, r24
	}

}
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	ff 91       	pop	r31
    1e4c:	ef 91       	pop	r30
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	18 95       	reti

00001e6c <__vector_10>:

void __vector_10()__attribute__((signal));
void __vector_10()
{
    1e6c:	1f 92       	push	r1
    1e6e:	0f 92       	push	r0
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	0f 92       	push	r0
    1e74:	11 24       	eor	r1, r1
    1e76:	2f 93       	push	r18
    1e78:	3f 93       	push	r19
    1e7a:	4f 93       	push	r20
    1e7c:	5f 93       	push	r21
    1e7e:	6f 93       	push	r22
    1e80:	7f 93       	push	r23
    1e82:	8f 93       	push	r24
    1e84:	9f 93       	push	r25
    1e86:	af 93       	push	r26
    1e88:	bf 93       	push	r27
    1e8a:	ef 93       	push	r30
    1e8c:	ff 93       	push	r31
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
	static u16 count = 0;
	if (count == 4000)
    1e96:	80 91 c0 00 	lds	r24, 0x00C0
    1e9a:	90 91 c1 00 	lds	r25, 0x00C1
    1e9e:	2f e0       	ldi	r18, 0x0F	; 15
    1ea0:	80 3a       	cpi	r24, 0xA0	; 160
    1ea2:	92 07       	cpc	r25, r18
    1ea4:	81 f4       	brne	.+32     	; 0x1ec6 <__vector_10+0x5a>
	{
		if(GlobalPtr != '\0')
    1ea6:	80 91 bc 00 	lds	r24, 0x00BC
    1eaa:	90 91 bd 00 	lds	r25, 0x00BD
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	99 f0       	breq	.+38     	; 0x1ed8 <__vector_10+0x6c>
		{
		    GlobalPtr();
    1eb2:	e0 91 bc 00 	lds	r30, 0x00BC
    1eb6:	f0 91 bd 00 	lds	r31, 0x00BD
    1eba:	09 95       	icall
		    count = 0;
    1ebc:	10 92 c1 00 	sts	0x00C1, r1
    1ec0:	10 92 c0 00 	sts	0x00C0, r1
    1ec4:	09 c0       	rjmp	.+18     	; 0x1ed8 <__vector_10+0x6c>
		}
	}
	else
	{
		count ++;
    1ec6:	80 91 c0 00 	lds	r24, 0x00C0
    1eca:	90 91 c1 00 	lds	r25, 0x00C1
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	90 93 c1 00 	sts	0x00C1, r25
    1ed4:	80 93 c0 00 	sts	0x00C0, r24
	}
}
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	ff 91       	pop	r31
    1ede:	ef 91       	pop	r30
    1ee0:	bf 91       	pop	r27
    1ee2:	af 91       	pop	r26
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	7f 91       	pop	r23
    1eea:	6f 91       	pop	r22
    1eec:	5f 91       	pop	r21
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

00001efe <TMR1_SetCallBack>:
#include "TMR1_Interface.h"

void (*TMR1_GlobalPtr)(void) = '\0';

void TMR1_SetCallBack(void (*Ptr)(void))
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <TMR1_SetCallBack+0x6>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	TMR1_GlobalPtr = Ptr;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	90 93 c3 00 	sts	0x00C3, r25
    1f14:	80 93 c2 00 	sts	0x00C2, r24
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <TMR1_voidInit>:

void TMR1_voidInit(void)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
#if TMR1_Prescaler == TMR1_NO_Prescaler
	SetBit(TCCR1B , CS10);
	ClrBit(TCCR1B , CS11);
	ClrBit(TCCR1B , CS12);
#elif TMR1_Prescaler == TMR1_Prescaler_8
	ClrBit(TCCR1B , CS10);
    1f2a:	ae e4       	ldi	r26, 0x4E	; 78
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	ee e4       	ldi	r30, 0x4E	; 78
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	8e 7f       	andi	r24, 0xFE	; 254
    1f36:	8c 93       	st	X, r24
	SetBit(TCCR1B , CS11);
    1f38:	ae e4       	ldi	r26, 0x4E	; 78
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ee e4       	ldi	r30, 0x4E	; 78
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	82 60       	ori	r24, 0x02	; 2
    1f44:	8c 93       	st	X, r24
	ClrBit(TCCR1B , CS12);
    1f46:	ae e4       	ldi	r26, 0x4E	; 78
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	ee e4       	ldi	r30, 0x4E	; 78
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	8b 7f       	andi	r24, 0xFB	; 251
    1f52:	8c 93       	st	X, r24
	SetBit(TCCR1A , COM1B0);
    SetBit(TCCR1A , COM1A0);
	ClrBit(TCCR1A , COM1B1);
	ClrBit(TCCR1A , COM1A1);
#elif TMR1_CompareOutputMode == Clear_OC1A_OC1B
	ClrBit(TCCR1A , COM1B0);
    1f54:	af e4       	ldi	r26, 0x4F	; 79
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	ef e4       	ldi	r30, 0x4F	; 79
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8f 7e       	andi	r24, 0xEF	; 239
    1f60:	8c 93       	st	X, r24
    ClrBit(TCCR1A , COM1A0);
    1f62:	af e4       	ldi	r26, 0x4F	; 79
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	ef e4       	ldi	r30, 0x4F	; 79
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8f 7b       	andi	r24, 0xBF	; 191
    1f6e:	8c 93       	st	X, r24
	SetBit(TCCR1A , COM1B1);
    1f70:	af e4       	ldi	r26, 0x4F	; 79
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	ef e4       	ldi	r30, 0x4F	; 79
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 62       	ori	r24, 0x20	; 32
    1f7c:	8c 93       	st	X, r24
	SetBit(TCCR1A , COM1A1);
    1f7e:	af e4       	ldi	r26, 0x4F	; 79
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	ef e4       	ldi	r30, 0x4F	; 79
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	80 68       	ori	r24, 0x80	; 128
    1f8a:	8c 93       	st	X, r24
	SetBit(TCCR1B , WGM13);
	/*Output Compare Match Interrupt Enable*/
	SetBit(TIMSK , OCIE1A);
	//SetBit(TIMSK , OCIE1B);
#elif TMR1_Mode == FastPWM
	ClrBit(TCCR1A , WGM10);
    1f8c:	af e4       	ldi	r26, 0x4F	; 79
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	ef e4       	ldi	r30, 0x4F	; 79
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	8e 7f       	andi	r24, 0xFE	; 254
    1f98:	8c 93       	st	X, r24
	SetBit(TCCR1A , WGM11);
    1f9a:	af e4       	ldi	r26, 0x4F	; 79
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	ef e4       	ldi	r30, 0x4F	; 79
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	82 60       	ori	r24, 0x02	; 2
    1fa6:	8c 93       	st	X, r24
	SetBit(TCCR1B , WGM12);
    1fa8:	ae e4       	ldi	r26, 0x4E	; 78
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ee e4       	ldi	r30, 0x4E	; 78
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 60       	ori	r24, 0x08	; 8
    1fb4:	8c 93       	st	X, r24
	SetBit(TCCR1B , WGM13);
    1fb6:	ae e4       	ldi	r26, 0x4E	; 78
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	ee e4       	ldi	r30, 0x4E	; 78
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	80 61       	ori	r24, 0x10	; 16
    1fc2:	8c 93       	st	X, r24
	ICR1 = 20000;     //for servo
    1fc4:	e6 e4       	ldi	r30, 0x46	; 70
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 e2       	ldi	r24, 0x20	; 32
    1fca:	9e e4       	ldi	r25, 0x4E	; 78
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
#endif

}
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <TMR1_voidOCR1A>:

void TMR1_voidOCR1A(u16 Copy_u16OCR1AValue)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <TMR1_voidOCR1A+0x6>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16OCR1AValue;
    1fe4:	ea e4       	ldi	r30, 0x4A	; 74
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <TMR1_voidPreload>:

void TMR1_voidPreload(u16 Copy_u16Value)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <TMR1_voidPreload+0x6>
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    2008:	ec e4       	ldi	r30, 0x4C	; 76
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	80 83       	st	Z, r24
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <TMR1_u16ICR1>:

u16 TMR1_u16ICR1(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2026:	e6 e4       	ldi	r30, 0x46	; 70
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <TMR1_voidICU_EdgeSelect>:

void TMR1_voidICU_EdgeSelect(u16 Copy_u16EdgeSelect)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <TMR1_voidICU_EdgeSelect+0x6>
    203a:	00 d0       	rcall	.+0      	; 0x203c <TMR1_voidICU_EdgeSelect+0x8>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u16EdgeSelect)
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	31 f0       	breq	.+12     	; 0x2060 <TMR1_voidICU_EdgeSelect+0x2c>
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	91 05       	cpc	r25, r1
    205c:	49 f0       	breq	.+18     	; 0x2070 <TMR1_voidICU_EdgeSelect+0x3c>
    205e:	0f c0       	rjmp	.+30     	; 0x207e <TMR1_voidICU_EdgeSelect+0x4a>
	{
	case RisingEdge :
		SetBit(TCCR1B , ICES1);
    2060:	ae e4       	ldi	r26, 0x4E	; 78
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ee e4       	ldi	r30, 0x4E	; 78
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 64       	ori	r24, 0x40	; 64
    206c:	8c 93       	st	X, r24
    206e:	07 c0       	rjmp	.+14     	; 0x207e <TMR1_voidICU_EdgeSelect+0x4a>
		break;
	case FallingEdge :
		ClrBit(TCCR1B , ICES1);
    2070:	ae e4       	ldi	r26, 0x4E	; 78
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	ee e4       	ldi	r30, 0x4E	; 78
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	8f 7b       	andi	r24, 0xBF	; 191
    207c:	8c 93       	st	X, r24
	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <__vector_9>:
void __vector_9()__attribute__((signal));     //overflow
void __vector_9()
{
    208c:	1f 92       	push	r1
    208e:	0f 92       	push	r0
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	0f 92       	push	r0
    2094:	11 24       	eor	r1, r1
    2096:	2f 93       	push	r18
    2098:	3f 93       	push	r19
    209a:	4f 93       	push	r20
    209c:	5f 93       	push	r21
    209e:	6f 93       	push	r22
    20a0:	7f 93       	push	r23
    20a2:	8f 93       	push	r24
    20a4:	9f 93       	push	r25
    20a6:	af 93       	push	r26
    20a8:	bf 93       	push	r27
    20aa:	ef 93       	push	r30
    20ac:	ff 93       	push	r31
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    20b6:	80 91 c2 00 	lds	r24, 0x00C2
    20ba:	90 91 c3 00 	lds	r25, 0x00C3
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	29 f0       	breq	.+10     	; 0x20cc <__vector_9+0x40>
	{
		TMR1_GlobalPtr();
    20c2:	e0 91 c2 00 	lds	r30, 0x00C2
    20c6:	f0 91 c3 00 	lds	r31, 0x00C3
    20ca:	09 95       	icall
	}
}
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	ff 91       	pop	r31
    20d2:	ef 91       	pop	r30
    20d4:	bf 91       	pop	r27
    20d6:	af 91       	pop	r26
    20d8:	9f 91       	pop	r25
    20da:	8f 91       	pop	r24
    20dc:	7f 91       	pop	r23
    20de:	6f 91       	pop	r22
    20e0:	5f 91       	pop	r21
    20e2:	4f 91       	pop	r20
    20e4:	3f 91       	pop	r19
    20e6:	2f 91       	pop	r18
    20e8:	0f 90       	pop	r0
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	0f 90       	pop	r0
    20ee:	1f 90       	pop	r1
    20f0:	18 95       	reti

000020f2 <__vector_7>:

void __vector_7()__attribute__((signal));      //compare
void __vector_7()
{
    20f2:	1f 92       	push	r1
    20f4:	0f 92       	push	r0
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	0f 92       	push	r0
    20fa:	11 24       	eor	r1, r1
    20fc:	2f 93       	push	r18
    20fe:	3f 93       	push	r19
    2100:	4f 93       	push	r20
    2102:	5f 93       	push	r21
    2104:	6f 93       	push	r22
    2106:	7f 93       	push	r23
    2108:	8f 93       	push	r24
    210a:	9f 93       	push	r25
    210c:	af 93       	push	r26
    210e:	bf 93       	push	r27
    2110:	ef 93       	push	r30
    2112:	ff 93       	push	r31
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    211c:	80 91 c2 00 	lds	r24, 0x00C2
    2120:	90 91 c3 00 	lds	r25, 0x00C3
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	29 f0       	breq	.+10     	; 0x2132 <__vector_7+0x40>
	{
		TMR1_GlobalPtr();
    2128:	e0 91 c2 00 	lds	r30, 0x00C2
    212c:	f0 91 c3 00 	lds	r31, 0x00C3
    2130:	09 95       	icall
	}
}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	ff 91       	pop	r31
    2138:	ef 91       	pop	r30
    213a:	bf 91       	pop	r27
    213c:	af 91       	pop	r26
    213e:	9f 91       	pop	r25
    2140:	8f 91       	pop	r24
    2142:	7f 91       	pop	r23
    2144:	6f 91       	pop	r22
    2146:	5f 91       	pop	r21
    2148:	4f 91       	pop	r20
    214a:	3f 91       	pop	r19
    214c:	2f 91       	pop	r18
    214e:	0f 90       	pop	r0
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	0f 90       	pop	r0
    2154:	1f 90       	pop	r1
    2156:	18 95       	reti

00002158 <__vector_6>:

void __vector_6()__attribute__((signal));     //capture event
void __vector_6()
{
    2158:	1f 92       	push	r1
    215a:	0f 92       	push	r0
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	0f 92       	push	r0
    2160:	11 24       	eor	r1, r1
    2162:	2f 93       	push	r18
    2164:	3f 93       	push	r19
    2166:	4f 93       	push	r20
    2168:	5f 93       	push	r21
    216a:	6f 93       	push	r22
    216c:	7f 93       	push	r23
    216e:	8f 93       	push	r24
    2170:	9f 93       	push	r25
    2172:	af 93       	push	r26
    2174:	bf 93       	push	r27
    2176:	ef 93       	push	r30
    2178:	ff 93       	push	r31
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    2182:	80 91 c2 00 	lds	r24, 0x00C2
    2186:	90 91 c3 00 	lds	r25, 0x00C3
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	29 f0       	breq	.+10     	; 0x2198 <__vector_6+0x40>
	{
		TMR1_GlobalPtr();
    218e:	e0 91 c2 00 	lds	r30, 0x00C2
    2192:	f0 91 c3 00 	lds	r31, 0x00C3
    2196:	09 95       	icall
	}
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	ff 91       	pop	r31
    219e:	ef 91       	pop	r30
    21a0:	bf 91       	pop	r27
    21a2:	af 91       	pop	r26
    21a4:	9f 91       	pop	r25
    21a6:	8f 91       	pop	r24
    21a8:	7f 91       	pop	r23
    21aa:	6f 91       	pop	r22
    21ac:	5f 91       	pop	r21
    21ae:	4f 91       	pop	r20
    21b0:	3f 91       	pop	r19
    21b2:	2f 91       	pop	r18
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	0f 90       	pop	r0
    21ba:	1f 90       	pop	r1
    21bc:	18 95       	reti

000021be <USART_voidInitial>:
#include "USART_Config.h"
#include "USART_Interface.h"
//#include "avr/delay.h"

void USART_voidInitial(void)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB , TXEN);
    21c6:	aa e2       	ldi	r26, 0x2A	; 42
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	ea e2       	ldi	r30, 0x2A	; 42
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	88 60       	ori	r24, 0x08	; 8
    21d2:	8c 93       	st	X, r24
	SetBit(UCSRB , RXEN);
    21d4:	aa e2       	ldi	r26, 0x2A	; 42
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	ea e2       	ldi	r30, 0x2A	; 42
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	80 61       	ori	r24, 0x10	; 16
    21e0:	8c 93       	st	X, r24

	UCSRC = Temp;
    21e2:	e0 e4       	ldi	r30, 0x40	; 64
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	86 e8       	ldi	r24, 0x86	; 134
    21e8:	80 83       	st	Z, r24
	UBRRL = 51;
    21ea:	e9 e2       	ldi	r30, 0x29	; 41
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	83 e3       	ldi	r24, 0x33	; 51
    21f0:	80 83       	st	Z, r24
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <USART_voidSendData>:

void USART_voidSendData(u16 Copy_u16Data)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <USART_voidSendData+0x6>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
	while(GetBit(UCSRA , UDRE) == 0);
    2206:	eb e2       	ldi	r30, 0x2B	; 43
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	82 95       	swap	r24
    220e:	86 95       	lsr	r24
    2210:	87 70       	andi	r24, 0x07	; 7
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	81 70       	andi	r24, 0x01	; 1
    2218:	90 70       	andi	r25, 0x00	; 0
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	a1 f3       	breq	.-24     	; 0x2206 <USART_voidSendData+0xe>
	UDR = Copy_u16Data;
    221e:	ec e2       	ldi	r30, 0x2C	; 44
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	80 83       	st	Z, r24
	//while(GetBit(UCSRA , TXC) == 0);
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <USART_u16RecieveData>:

u16 USART_u16RecieveData(void)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	while(GetBit(UCSRA , RXC) == 0);
    2238:	eb e2       	ldi	r30, 0x2B	; 43
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	88 23       	and	r24, r24
    2240:	dc f7       	brge	.-10     	; 0x2238 <USART_u16RecieveData+0x8>
	return UDR;
    2242:	ec e2       	ldi	r30, 0x2C	; 44
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
}
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <USART_voidSendString>:

void USART_voidSendString(u8 *Copy_u8String)
{
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <USART_voidSendString+0x6>
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	0c c0       	rjmp	.+24     	; 0x227a <USART_voidSendString+0x28>
	while( (*Copy_u8String) != '\0' )
		{
		    USART_voidSendData(*Copy_u8String);
    2262:	e9 81       	ldd	r30, Y+1	; 0x01
    2264:	fa 81       	ldd	r31, Y+2	; 0x02
    2266:	80 81       	ld	r24, Z
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <USART_voidSendData>
		   // while(GetBit(UCSRA , TXC) == 0);
			Copy_u8String++;
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_voidSendString(u8 *Copy_u8String)
{
	while( (*Copy_u8String) != '\0' )
    227a:	e9 81       	ldd	r30, Y+1	; 0x01
    227c:	fa 81       	ldd	r31, Y+2	; 0x02
    227e:	80 81       	ld	r24, Z
    2280:	88 23       	and	r24, r24
    2282:	79 f7       	brne	.-34     	; 0x2262 <USART_voidSendString+0x10>
		{
		    USART_voidSendData(*Copy_u8String);
		   // while(GetBit(UCSRA , TXC) == 0);
			Copy_u8String++;
		}
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <USART_voidSendNumbers>:

void USART_voidSendNumbers(u8 Copy_u8Number)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	62 97       	sbiw	r28, 0x12	; 18
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	8a 8b       	std	Y+18, r24	; 0x12
		u8 arr[15];
		u8 digits = 0;
    22a4:	1a 82       	std	Y+2, r1	; 0x02
    22a6:	1a c0       	rjmp	.+52     	; 0x22dc <USART_voidSendNumbers+0x4e>
		while(Copy_u8Number != 0)
		{
			arr[digits] = (Copy_u8Number % 10) + ZeroASCIICode ;
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	48 2f       	mov	r20, r24
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	8a 89       	ldd	r24, Y+18	; 0x12
    22b0:	9a e0       	ldi	r25, 0x0A	; 10
    22b2:	69 2f       	mov	r22, r25
    22b4:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodqi4>
    22b8:	89 2f       	mov	r24, r25
    22ba:	28 2f       	mov	r18, r24
    22bc:	20 5d       	subi	r18, 0xD0	; 208
    22be:	ce 01       	movw	r24, r28
    22c0:	03 96       	adiw	r24, 0x03	; 3
    22c2:	fc 01       	movw	r30, r24
    22c4:	e4 0f       	add	r30, r20
    22c6:	f5 1f       	adc	r31, r21
    22c8:	20 83       	st	Z, r18
			Copy_u8Number /= 10 ;
    22ca:	8a 89       	ldd	r24, Y+18	; 0x12
    22cc:	9a e0       	ldi	r25, 0x0A	; 10
    22ce:	69 2f       	mov	r22, r25
    22d0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodqi4>
    22d4:	8a 8b       	std	Y+18, r24	; 0x12
			digits++;
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	8a 83       	std	Y+2, r24	; 0x02

void USART_voidSendNumbers(u8 Copy_u8Number)
{
		u8 arr[15];
		u8 digits = 0;
		while(Copy_u8Number != 0)
    22dc:	8a 89       	ldd	r24, Y+18	; 0x12
    22de:	88 23       	and	r24, r24
    22e0:	19 f7       	brne	.-58     	; 0x22a8 <USART_voidSendNumbers+0x1a>
		{
			arr[digits] = (Copy_u8Number % 10) + ZeroASCIICode ;
			Copy_u8Number /= 10 ;
			digits++;
		}
		for(s8 j=digits-1 ; j>=0 ; j--)
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	81 50       	subi	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	12 c0       	rjmp	.+36     	; 0x230e <USART_voidSendNumbers+0x80>
		{
			USART_voidSendData(arr[j]);
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	28 2f       	mov	r18, r24
    22ee:	33 27       	eor	r19, r19
    22f0:	27 fd       	sbrc	r18, 7
    22f2:	30 95       	com	r19
    22f4:	ce 01       	movw	r24, r28
    22f6:	03 96       	adiw	r24, 0x03	; 3
    22f8:	fc 01       	movw	r30, r24
    22fa:	e2 0f       	add	r30, r18
    22fc:	f3 1f       	adc	r31, r19
    22fe:	80 81       	ld	r24, Z
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <USART_voidSendData>
		{
			arr[digits] = (Copy_u8Number % 10) + ZeroASCIICode ;
			Copy_u8Number /= 10 ;
			digits++;
		}
		for(s8 j=digits-1 ; j>=0 ; j--)
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	81 50       	subi	r24, 0x01	; 1
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	88 23       	and	r24, r24
    2312:	5c f7       	brge	.-42     	; 0x22ea <USART_voidSendNumbers+0x5c>
		{
			USART_voidSendData(arr[j]);
		}
}
    2314:	62 96       	adiw	r28, 0x12	; 18
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <main>:
#include "TMR1_Interface.h"
//#include "USART_Interface.h"
#include "avr/delay.h"

int main()
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	ea 97       	sbiw	r28, 0x3a	; 58
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
	u16 temp , LDR_OUT , LDR_room1 , LDR_room2 , LDR_room3;
	u16 factor , curtain , Room_light;


	ADC_voidInit();      //ADC Initialized
    233a:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	LCD_voidInitialize();    //LCD Initialized
    233e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_voidInitialize>

	EXT_voidGIE_Enable();
    2342:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EXT_voidGIE_Enable>

	DIO_voidSetPinDirection(portB , pin3 ,pin_output);
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	63 e0       	ldi	r22, 0x03	; 3
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
	TMR0_voidInit();     //Timer0 Initialized
    2350:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <TMR0_voidInit>

	DIO_voidSetPinDirection(portD , pin5 ,pin_output);
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	65 e0       	ldi	r22, 0x05	; 5
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
	TMR1_voidInit();     //Timer1 Initialized
    235e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <TMR1_voidInit>

	//USART_voidInitial();
	/*warning led if there is fire*/
	DIO_voidSetPinDirection(portB , pin5 , pin_output);
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	65 e0       	ldi	r22, 0x05	; 5
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>

	/*leds of 3 Rooms*/
	DIO_voidSetPinDirection(portD , pin3 ,pin_output);
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	63 e0       	ldi	r22, 0x03	; 3
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(portD , pin7 ,pin_output);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	67 e0       	ldi	r22, 0x07	; 7
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(portD , pin6 ,pin_output);
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	66 e0       	ldi	r22, 0x06	; 6
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_voidSetPinDirection>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	aa ef       	ldi	r26, 0xFA	; 250
    2390:	b3 e4       	ldi	r27, 0x43	; 67
    2392:	8f a3       	std	Y+39, r24	; 0x27
    2394:	98 a7       	std	Y+40, r25	; 0x28
    2396:	a9 a7       	std	Y+41, r26	; 0x29
    2398:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	6f a1       	ldd	r22, Y+39	; 0x27
    239c:	78 a5       	ldd	r23, Y+40	; 0x28
    239e:	89 a5       	ldd	r24, Y+41	; 0x29
    23a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a ef       	ldi	r20, 0xFA	; 250
    23a8:	54 e4       	ldi	r21, 0x44	; 68
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	8b a3       	std	Y+35, r24	; 0x23
    23b4:	9c a3       	std	Y+36, r25	; 0x24
    23b6:	ad a3       	std	Y+37, r26	; 0x25
    23b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23ba:	6b a1       	ldd	r22, Y+35	; 0x23
    23bc:	7c a1       	ldd	r23, Y+36	; 0x24
    23be:	8d a1       	ldd	r24, Y+37	; 0x25
    23c0:	9e a1       	ldd	r25, Y+38	; 0x26
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	2c f4       	brge	.+10     	; 0x23dc <main+0xb6>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9a a3       	std	Y+34, r25	; 0x22
    23d8:	89 a3       	std	Y+33, r24	; 0x21
    23da:	3f c0       	rjmp	.+126    	; 0x245a <main+0x134>
	else if (__tmp > 65535)
    23dc:	6b a1       	ldd	r22, Y+35	; 0x23
    23de:	7c a1       	ldd	r23, Y+36	; 0x24
    23e0:	8d a1       	ldd	r24, Y+37	; 0x25
    23e2:	9e a1       	ldd	r25, Y+38	; 0x26
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	4c f5       	brge	.+82     	; 0x2446 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f4:	6f a1       	ldd	r22, Y+39	; 0x27
    23f6:	78 a5       	ldd	r23, Y+40	; 0x28
    23f8:	89 a5       	ldd	r24, Y+41	; 0x29
    23fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
    241c:	0f c0       	rjmp	.+30     	; 0x243c <main+0x116>
    241e:	88 ec       	ldi	r24, 0xC8	; 200
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	98 a3       	std	Y+32, r25	; 0x20
    2424:	8f 8f       	std	Y+31, r24	; 0x1f
    2426:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2428:	98 a1       	ldd	r25, Y+32	; 0x20
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <main+0x104>
    242e:	98 a3       	std	Y+32, r25	; 0x20
    2430:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	89 a1       	ldd	r24, Y+33	; 0x21
    2434:	9a a1       	ldd	r25, Y+34	; 0x22
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	9a a3       	std	Y+34, r25	; 0x22
    243a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	89 a1       	ldd	r24, Y+33	; 0x21
    243e:	9a a1       	ldd	r25, Y+34	; 0x22
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f7       	brne	.-38     	; 0x241e <main+0xf8>
    2444:	14 c0       	rjmp	.+40     	; 0x246e <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2446:	6b a1       	ldd	r22, Y+35	; 0x23
    2448:	7c a1       	ldd	r23, Y+36	; 0x24
    244a:	8d a1       	ldd	r24, Y+37	; 0x25
    244c:	9e a1       	ldd	r25, Y+38	; 0x26
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9a a3       	std	Y+34, r25	; 0x22
    2458:	89 a3       	std	Y+33, r24	; 0x21
    245a:	89 a1       	ldd	r24, Y+33	; 0x21
    245c:	9a a1       	ldd	r25, Y+34	; 0x22
    245e:	9e 8f       	std	Y+30, r25	; 0x1e
    2460:	8d 8f       	std	Y+29, r24	; 0x1d
    2462:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2464:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <main+0x140>
    246a:	9e 8f       	std	Y+30, r25	; 0x1e
    246c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

		while(1){
//_________________________controlling fan using temperature sensor______________________
			/*take analog value from temperature sensor , converting it into degree*/
			temp = ADC_voidStartConversion(ADC0 , factor64);
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	66 e0       	ldi	r22, 0x06	; 6
    2474:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ADC_voidStartConversion>
    2478:	9a af       	std	Y+58, r25	; 0x3a
    247a:	89 af       	std	Y+57, r24	; 0x39
			temp = ( ((u32)temp*5000)/(u16)1023 ) / 10;         //degree
    247c:	89 ad       	ldd	r24, Y+57	; 0x39
    247e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2480:	cc 01       	movw	r24, r24
    2482:	a0 e0       	ldi	r26, 0x00	; 0
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	28 e8       	ldi	r18, 0x88	; 136
    2488:	33 e1       	ldi	r19, 0x13	; 19
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsi3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	26 ef       	ldi	r18, 0xF6	; 246
    249c:	37 e2       	ldi	r19, 0x27	; 39
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 b0 14 	call	0x2960	; 0x2960 <__udivmodsi4>
    24aa:	da 01       	movw	r26, r20
    24ac:	c9 01       	movw	r24, r18
    24ae:	9a af       	std	Y+58, r25	; 0x3a
    24b0:	89 af       	std	Y+57, r24	; 0x39

			/*display tempreture value over an LCD*/
			LCD_voidClear();
    24b2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_voidClear>
			LCD_voidString("Temp = ");
    24b6:	80 e6       	ldi	r24, 0x60	; 96
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_voidString>
			LCD_voidNumbers(temp);
    24be:	89 ad       	ldd	r24, Y+57	; 0x39
    24c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    24c2:	cc 01       	movw	r24, r24
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_voidNumbers>
			LCD_voidString(" C");
    24d0:	88 e6       	ldi	r24, 0x68	; 104
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_voidString>

			/*control motor of fan depending on the temperature*/
			if ((temp >= 20) && (temp <= 25))
    24d8:	89 ad       	ldd	r24, Y+57	; 0x39
    24da:	9a ad       	ldd	r25, Y+58	; 0x3a
    24dc:	84 31       	cpi	r24, 0x14	; 20
    24de:	91 05       	cpc	r25, r1
    24e0:	b8 f0       	brcs	.+46     	; 0x2510 <main+0x1ea>
    24e2:	89 ad       	ldd	r24, Y+57	; 0x39
    24e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    24e6:	8a 31       	cpi	r24, 0x1A	; 26
    24e8:	91 05       	cpc	r25, r1
    24ea:	90 f4       	brcc	.+36     	; 0x2510 <main+0x1ea>
			{
				TMR0_voidOCR0(127);
    24ec:	8f e7       	ldi	r24, 0x7F	; 127
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TMR0_voidOCR0>
				LCD_voidGoToXY(0,2);
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	62 e0       	ldi	r22, 0x02	; 2
    24f8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_voidGoToXY>
				LCD_voidString("Fan : half speed");
    24fc:	8b e6       	ldi	r24, 0x6B	; 107
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_voidString>
				DIO_voidSetPinValue(portB , pin5 , pin_low);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	65 e0       	ldi	r22, 0x05	; 5
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    250e:	60 c0       	rjmp	.+192    	; 0x25d0 <main+0x2aa>
			}

			else if ((temp > 25) && (temp <= 30))
    2510:	89 ad       	ldd	r24, Y+57	; 0x39
    2512:	9a ad       	ldd	r25, Y+58	; 0x3a
    2514:	8a 31       	cpi	r24, 0x1A	; 26
    2516:	91 05       	cpc	r25, r1
    2518:	b8 f0       	brcs	.+46     	; 0x2548 <main+0x222>
    251a:	89 ad       	ldd	r24, Y+57	; 0x39
    251c:	9a ad       	ldd	r25, Y+58	; 0x3a
    251e:	8f 31       	cpi	r24, 0x1F	; 31
    2520:	91 05       	cpc	r25, r1
    2522:	90 f4       	brcc	.+36     	; 0x2548 <main+0x222>
			{
				TMR0_voidOCR0(191);
    2524:	8f eb       	ldi	r24, 0xBF	; 191
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TMR0_voidOCR0>
				LCD_voidGoToXY(0,2);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	62 e0       	ldi	r22, 0x02	; 2
    2530:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_voidGoToXY>
				LCD_voidString("Fan : 75% speed");
    2534:	8c e7       	ldi	r24, 0x7C	; 124
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_voidString>
				DIO_voidSetPinValue(portB , pin5 , pin_low);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	65 e0       	ldi	r22, 0x05	; 5
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    2546:	44 c0       	rjmp	.+136    	; 0x25d0 <main+0x2aa>
			}

			else if ((temp > 30) && (temp <= 45))   //high temperature
    2548:	89 ad       	ldd	r24, Y+57	; 0x39
    254a:	9a ad       	ldd	r25, Y+58	; 0x3a
    254c:	8f 31       	cpi	r24, 0x1F	; 31
    254e:	91 05       	cpc	r25, r1
    2550:	b8 f0       	brcs	.+46     	; 0x2580 <main+0x25a>
    2552:	89 ad       	ldd	r24, Y+57	; 0x39
    2554:	9a ad       	ldd	r25, Y+58	; 0x3a
    2556:	8e 32       	cpi	r24, 0x2E	; 46
    2558:	91 05       	cpc	r25, r1
    255a:	90 f4       	brcc	.+36     	; 0x2580 <main+0x25a>
			{
				TMR0_voidOCR0(255);
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TMR0_voidOCR0>
				LCD_voidGoToXY(0,2);
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_voidGoToXY>
				LCD_voidString("Fan : full speed");
    256c:	8c e8       	ldi	r24, 0x8C	; 140
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_voidString>
				DIO_voidSetPinValue(portB , pin5 , pin_low);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	65 e0       	ldi	r22, 0x05	; 5
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    257e:	28 c0       	rjmp	.+80     	; 0x25d0 <main+0x2aa>
			}

			/*very high temperature (fire warning)*/
			else if(temp > 45)
    2580:	89 ad       	ldd	r24, Y+57	; 0x39
    2582:	9a ad       	ldd	r25, Y+58	; 0x3a
    2584:	8e 32       	cpi	r24, 0x2E	; 46
    2586:	91 05       	cpc	r25, r1
    2588:	90 f0       	brcs	.+36     	; 0x25ae <main+0x288>
			{
				TMR0_voidOCR0(0);
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TMR0_voidOCR0>
				LCD_voidGoToXY(0,2);
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	62 e0       	ldi	r22, 0x02	; 2
    2596:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_voidGoToXY>
				LCD_voidString("Fire warning!!");
    259a:	8d e9       	ldi	r24, 0x9D	; 157
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_voidString>
				DIO_voidSetPinValue(portB , pin5 , pin_high);  //red led ON
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	65 e0       	ldi	r22, 0x05	; 5
    25a6:	41 e0       	ldi	r20, 0x01	; 1
    25a8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    25ac:	11 c0       	rjmp	.+34     	; 0x25d0 <main+0x2aa>
				//USART_voidSendData('1');
			}

			else
			{
				TMR0_voidOCR0(0);
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TMR0_voidOCR0>
				LCD_voidGoToXY(0,2);
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	62 e0       	ldi	r22, 0x02	; 2
    25ba:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_voidGoToXY>
				LCD_voidString("Fan OFF");
    25be:	8c ea       	ldi	r24, 0xAC	; 172
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_voidString>
				DIO_voidSetPinValue(portB , pin5 , pin_low);
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	65 e0       	ldi	r22, 0x05	; 5
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	aa ef       	ldi	r26, 0xFA	; 250
    25d6:	b3 e4       	ldi	r27, 0x43	; 67
    25d8:	89 8f       	std	Y+25, r24	; 0x19
    25da:	9a 8f       	std	Y+26, r25	; 0x1a
    25dc:	ab 8f       	std	Y+27, r26	; 0x1b
    25de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	69 8d       	ldd	r22, Y+25	; 0x19
    25e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8d 8b       	std	Y+21, r24	; 0x15
    25fa:	9e 8b       	std	Y+22, r25	; 0x16
    25fc:	af 8b       	std	Y+23, r26	; 0x17
    25fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2600:	6d 89       	ldd	r22, Y+21	; 0x15
    2602:	7e 89       	ldd	r23, Y+22	; 0x16
    2604:	8f 89       	ldd	r24, Y+23	; 0x17
    2606:	98 8d       	ldd	r25, Y+24	; 0x18
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <main+0x2fc>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c 8b       	std	Y+20, r25	; 0x14
    261e:	8b 8b       	std	Y+19, r24	; 0x13
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <main+0x37a>
	else if (__tmp > 65535)
    2622:	6d 89       	ldd	r22, Y+21	; 0x15
    2624:	7e 89       	ldd	r23, Y+22	; 0x16
    2626:	8f 89       	ldd	r24, Y+23	; 0x17
    2628:	98 8d       	ldd	r25, Y+24	; 0x18
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <main+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	69 8d       	ldd	r22, Y+25	; 0x19
    263c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9c 8b       	std	Y+20, r25	; 0x14
    2660:	8b 8b       	std	Y+19, r24	; 0x13
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <main+0x35c>
    2664:	88 ec       	ldi	r24, 0xC8	; 200
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9a 8b       	std	Y+18, r25	; 0x12
    266a:	89 8b       	std	Y+17, r24	; 0x11
    266c:	89 89       	ldd	r24, Y+17	; 0x11
    266e:	9a 89       	ldd	r25, Y+18	; 0x12
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <main+0x34a>
    2674:	9a 8b       	std	Y+18, r25	; 0x12
    2676:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8b 89       	ldd	r24, Y+19	; 0x13
    267a:	9c 89       	ldd	r25, Y+20	; 0x14
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9c 8b       	std	Y+20, r25	; 0x14
    2680:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8b 89       	ldd	r24, Y+19	; 0x13
    2684:	9c 89       	ldd	r25, Y+20	; 0x14
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <main+0x33e>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <main+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6d 89       	ldd	r22, Y+21	; 0x15
    268e:	7e 89       	ldd	r23, Y+22	; 0x16
    2690:	8f 89       	ldd	r24, Y+23	; 0x17
    2692:	98 8d       	ldd	r25, Y+24	; 0x18
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	8b 8b       	std	Y+19, r24	; 0x13
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	98 8b       	std	Y+16, r25	; 0x10
    26a6:	8f 87       	std	Y+15, r24	; 0x0f
    26a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26aa:	98 89       	ldd	r25, Y+16	; 0x10
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <main+0x386>
    26b0:	98 8b       	std	Y+16, r25	; 0x10
    26b2:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(500);

//__________________controlling a servo motor of the curtain using an LDR___________________

			LDR_OUT = ADC_voidStartConversion(ADC1 , factor64);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	66 e0       	ldi	r22, 0x06	; 6
    26ba:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ADC_voidStartConversion>
    26be:	98 af       	std	Y+56, r25	; 0x38
    26c0:	8f ab       	std	Y+55, r24	; 0x37
			factor = ( (2300-800) / (1023-0) );
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	98 ab       	std	Y+48, r25	; 0x30
    26c8:	8f a7       	std	Y+47, r24	; 0x2f
			curtain = (LDR_OUT*factor) + 800;
    26ca:	2f a9       	ldd	r18, Y+55	; 0x37
    26cc:	38 ad       	ldd	r19, Y+56	; 0x38
    26ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d0:	98 a9       	ldd	r25, Y+48	; 0x30
    26d2:	ac 01       	movw	r20, r24
    26d4:	24 9f       	mul	r18, r20
    26d6:	c0 01       	movw	r24, r0
    26d8:	25 9f       	mul	r18, r21
    26da:	90 0d       	add	r25, r0
    26dc:	34 9f       	mul	r19, r20
    26de:	90 0d       	add	r25, r0
    26e0:	11 24       	eor	r1, r1
    26e2:	80 5e       	subi	r24, 0xE0	; 224
    26e4:	9c 4f       	sbci	r25, 0xFC	; 252
    26e6:	9e a7       	std	Y+46, r25	; 0x2e
    26e8:	8d a7       	std	Y+45, r24	; 0x2d
			/*Openning or Closing the curtain*/
			TMR1_voidOCR1A(curtain);
    26ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    26ee:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <TMR1_voidOCR1A>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a8 e4       	ldi	r26, 0x48	; 72
    26f8:	b3 e4       	ldi	r27, 0x43	; 67
    26fa:	8b 87       	std	Y+11, r24	; 0x0b
    26fc:	9c 87       	std	Y+12, r25	; 0x0c
    26fe:	ad 87       	std	Y+13, r26	; 0x0d
    2700:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2702:	6b 85       	ldd	r22, Y+11	; 0x0b
    2704:	7c 85       	ldd	r23, Y+12	; 0x0c
    2706:	8d 85       	ldd	r24, Y+13	; 0x0d
    2708:	9e 85       	ldd	r25, Y+14	; 0x0e
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	4a ef       	ldi	r20, 0xFA	; 250
    2710:	54 e4       	ldi	r21, 0x44	; 68
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	8f 83       	std	Y+7, r24	; 0x07
    271c:	98 87       	std	Y+8, r25	; 0x08
    271e:	a9 87       	std	Y+9, r26	; 0x09
    2720:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2722:	6f 81       	ldd	r22, Y+7	; 0x07
    2724:	78 85       	ldd	r23, Y+8	; 0x08
    2726:	89 85       	ldd	r24, Y+9	; 0x09
    2728:	9a 85       	ldd	r25, Y+10	; 0x0a
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2736:	88 23       	and	r24, r24
    2738:	2c f4       	brge	.+10     	; 0x2744 <main+0x41e>
		__ticks = 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	3f c0       	rjmp	.+126    	; 0x27c2 <main+0x49c>
	else if (__tmp > 65535)
    2744:	6f 81       	ldd	r22, Y+7	; 0x07
    2746:	78 85       	ldd	r23, Y+8	; 0x08
    2748:	89 85       	ldd	r24, Y+9	; 0x09
    274a:	9a 85       	ldd	r25, Y+10	; 0x0a
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	3f ef       	ldi	r19, 0xFF	; 255
    2750:	4f e7       	ldi	r20, 0x7F	; 127
    2752:	57 e4       	ldi	r21, 0x47	; 71
    2754:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2758:	18 16       	cp	r1, r24
    275a:	4c f5       	brge	.+82     	; 0x27ae <main+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	6b 85       	ldd	r22, Y+11	; 0x0b
    275e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2760:	8d 85       	ldd	r24, Y+13	; 0x0d
    2762:	9e 85       	ldd	r25, Y+14	; 0x0e
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <main+0x47e>
    2786:	88 ec       	ldi	r24, 0xC8	; 200
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9c 83       	std	Y+4, r25	; 0x04
    278c:	8b 83       	std	Y+3, r24	; 0x03
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	9c 81       	ldd	r25, Y+4	; 0x04
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <main+0x46c>
    2796:	9c 83       	std	Y+4, r25	; 0x04
    2798:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279a:	8d 81       	ldd	r24, Y+5	; 0x05
    279c:	9e 81       	ldd	r25, Y+6	; 0x06
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	69 f7       	brne	.-38     	; 0x2786 <main+0x460>
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <main+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ae:	6f 81       	ldd	r22, Y+7	; 0x07
    27b0:	78 85       	ldd	r23, Y+8	; 0x08
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <main+0x4a8>
    27d2:	9a 83       	std	Y+2, r25	; 0x02
    27d4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);

//_____________controlling leds of 3 Rooms using 3 LDR (one in each room)__________________
			//___________________________ROOM_1___________________________
			/*take value of LDR of room1 , converting them into m_volt*/
			LDR_room1 = ADC_voidStartConversion(ADC2 , factor64);
    27d6:	82 e0       	ldi	r24, 0x02	; 2
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	66 e0       	ldi	r22, 0x06	; 6
    27dc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ADC_voidStartConversion>
    27e0:	9e ab       	std	Y+54, r25	; 0x36
    27e2:	8d ab       	std	Y+53, r24	; 0x35
			LDR_room1 = ((u32)LDR_room1*5000)/(u16)1023  ; //m-volt
    27e4:	8d a9       	ldd	r24, Y+53	; 0x35
    27e6:	9e a9       	ldd	r25, Y+54	; 0x36
    27e8:	cc 01       	movw	r24, r24
    27ea:	a0 e0       	ldi	r26, 0x00	; 0
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	28 e8       	ldi	r18, 0x88	; 136
    27f0:	33 e1       	ldi	r19, 0x13	; 19
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsi3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	2f ef       	ldi	r18, 0xFF	; 255
    2804:	33 e0       	ldi	r19, 0x03	; 3
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 b0 14 	call	0x2960	; 0x2960 <__udivmodsi4>
    2812:	da 01       	movw	r26, r20
    2814:	c9 01       	movw	r24, r18
    2816:	9e ab       	std	Y+54, r25	; 0x36
    2818:	8d ab       	std	Y+53, r24	; 0x35

			/*condition for led to turn it ON or OFF depending on readings of LDR of room1*/
			if (LDR_room1 < 2500)
    281a:	8d a9       	ldd	r24, Y+53	; 0x35
    281c:	9e a9       	ldd	r25, Y+54	; 0x36
    281e:	59 e0       	ldi	r21, 0x09	; 9
    2820:	84 3c       	cpi	r24, 0xC4	; 196
    2822:	95 07       	cpc	r25, r21
    2824:	30 f4       	brcc	.+12     	; 0x2832 <main+0x50c>
			{
				DIO_voidSetPinValue(portD ,pin3 , pin_high);
    2826:	83 e0       	ldi	r24, 0x03	; 3
    2828:	63 e0       	ldi	r22, 0x03	; 3
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    2830:	05 c0       	rjmp	.+10     	; 0x283c <main+0x516>
			}
			else
			{
				DIO_voidSetPinValue(portD ,pin3 , pin_low);
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	63 e0       	ldi	r22, 0x03	; 3
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			}
			//___________________________ROOM_2____________________________
			/*take value of LDR of room2 , converting them into m_volt*/
			LDR_room2 = ADC_voidStartConversion(ADC3 , factor64);
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	66 e0       	ldi	r22, 0x06	; 6
    2842:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ADC_voidStartConversion>
    2846:	9c ab       	std	Y+52, r25	; 0x34
    2848:	8b ab       	std	Y+51, r24	; 0x33
			LDR_room2 = ((u32)LDR_room2*5000)/(u16)1023  ; //m-volt
    284a:	8b a9       	ldd	r24, Y+51	; 0x33
    284c:	9c a9       	ldd	r25, Y+52	; 0x34
    284e:	cc 01       	movw	r24, r24
    2850:	a0 e0       	ldi	r26, 0x00	; 0
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	28 e8       	ldi	r18, 0x88	; 136
    2856:	33 e1       	ldi	r19, 0x13	; 19
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsi3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	2f ef       	ldi	r18, 0xFF	; 255
    286a:	33 e0       	ldi	r19, 0x03	; 3
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 b0 14 	call	0x2960	; 0x2960 <__udivmodsi4>
    2878:	da 01       	movw	r26, r20
    287a:	c9 01       	movw	r24, r18
    287c:	9c ab       	std	Y+52, r25	; 0x34
    287e:	8b ab       	std	Y+51, r24	; 0x33

			/*condition for led to turn it ON or OFF depending on readings of LDR of room2*/
			if (LDR_room2 < 2500)
    2880:	8b a9       	ldd	r24, Y+51	; 0x33
    2882:	9c a9       	ldd	r25, Y+52	; 0x34
    2884:	29 e0       	ldi	r18, 0x09	; 9
    2886:	84 3c       	cpi	r24, 0xC4	; 196
    2888:	92 07       	cpc	r25, r18
    288a:	30 f4       	brcc	.+12     	; 0x2898 <main+0x572>
			{
				DIO_voidSetPinValue(portD ,pin7 , pin_high);
    288c:	83 e0       	ldi	r24, 0x03	; 3
    288e:	67 e0       	ldi	r22, 0x07	; 7
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    2896:	05 c0       	rjmp	.+10     	; 0x28a2 <main+0x57c>
			}
			else
			{
				DIO_voidSetPinValue(portD ,pin7 , pin_low);
    2898:	83 e0       	ldi	r24, 0x03	; 3
    289a:	67 e0       	ldi	r22, 0x07	; 7
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			}
			//___________________________ROOM_3____________________________
			/*take value of LDR of room3 , converting them into m_volt*/
			LDR_room3 = ADC_voidStartConversion(ADC4 , factor64);
    28a2:	84 e0       	ldi	r24, 0x04	; 4
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	66 e0       	ldi	r22, 0x06	; 6
    28a8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ADC_voidStartConversion>
    28ac:	9a ab       	std	Y+50, r25	; 0x32
    28ae:	89 ab       	std	Y+49, r24	; 0x31
			LDR_room3 = ((u32)LDR_room3*5000)/(u16)1023  ; //m-volt
    28b0:	89 a9       	ldd	r24, Y+49	; 0x31
    28b2:	9a a9       	ldd	r25, Y+50	; 0x32
    28b4:	cc 01       	movw	r24, r24
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	28 e8       	ldi	r18, 0x88	; 136
    28bc:	33 e1       	ldi	r19, 0x13	; 19
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsi3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	2f ef       	ldi	r18, 0xFF	; 255
    28d0:	33 e0       	ldi	r19, 0x03	; 3
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 b0 14 	call	0x2960	; 0x2960 <__udivmodsi4>
    28de:	da 01       	movw	r26, r20
    28e0:	c9 01       	movw	r24, r18
    28e2:	9a ab       	std	Y+50, r25	; 0x32
    28e4:	89 ab       	std	Y+49, r24	; 0x31

			/*condition for led to turn it ON or OFF depending on readings of LDR of room3*/
			if (LDR_room3 < 2500)
    28e6:	89 a9       	ldd	r24, Y+49	; 0x31
    28e8:	9a a9       	ldd	r25, Y+50	; 0x32
    28ea:	49 e0       	ldi	r20, 0x09	; 9
    28ec:	84 3c       	cpi	r24, 0xC4	; 196
    28ee:	94 07       	cpc	r25, r20
    28f0:	30 f4       	brcc	.+12     	; 0x28fe <main+0x5d8>
			{
				DIO_voidSetPinValue(portD ,pin6 , pin_high);
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	66 e0       	ldi	r22, 0x06	; 6
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    28fc:	b8 cd       	rjmp	.-1168   	; 0x246e <main+0x148>
			}
			else
			{
				DIO_voidSetPinValue(portD ,pin6 , pin_low);
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	66 e0       	ldi	r22, 0x06	; 6
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    2908:	b2 cd       	rjmp	.-1180   	; 0x246e <main+0x148>

0000290a <__mulsi3>:
    290a:	62 9f       	mul	r22, r18
    290c:	d0 01       	movw	r26, r0
    290e:	73 9f       	mul	r23, r19
    2910:	f0 01       	movw	r30, r0
    2912:	82 9f       	mul	r24, r18
    2914:	e0 0d       	add	r30, r0
    2916:	f1 1d       	adc	r31, r1
    2918:	64 9f       	mul	r22, r20
    291a:	e0 0d       	add	r30, r0
    291c:	f1 1d       	adc	r31, r1
    291e:	92 9f       	mul	r25, r18
    2920:	f0 0d       	add	r31, r0
    2922:	83 9f       	mul	r24, r19
    2924:	f0 0d       	add	r31, r0
    2926:	74 9f       	mul	r23, r20
    2928:	f0 0d       	add	r31, r0
    292a:	65 9f       	mul	r22, r21
    292c:	f0 0d       	add	r31, r0
    292e:	99 27       	eor	r25, r25
    2930:	72 9f       	mul	r23, r18
    2932:	b0 0d       	add	r27, r0
    2934:	e1 1d       	adc	r30, r1
    2936:	f9 1f       	adc	r31, r25
    2938:	63 9f       	mul	r22, r19
    293a:	b0 0d       	add	r27, r0
    293c:	e1 1d       	adc	r30, r1
    293e:	f9 1f       	adc	r31, r25
    2940:	bd 01       	movw	r22, r26
    2942:	cf 01       	movw	r24, r30
    2944:	11 24       	eor	r1, r1
    2946:	08 95       	ret

00002948 <__udivmodqi4>:
    2948:	99 1b       	sub	r25, r25
    294a:	79 e0       	ldi	r23, 0x09	; 9
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <__udivmodqi4_ep>

0000294e <__udivmodqi4_loop>:
    294e:	99 1f       	adc	r25, r25
    2950:	96 17       	cp	r25, r22
    2952:	08 f0       	brcs	.+2      	; 0x2956 <__udivmodqi4_ep>
    2954:	96 1b       	sub	r25, r22

00002956 <__udivmodqi4_ep>:
    2956:	88 1f       	adc	r24, r24
    2958:	7a 95       	dec	r23
    295a:	c9 f7       	brne	.-14     	; 0x294e <__udivmodqi4_loop>
    295c:	80 95       	com	r24
    295e:	08 95       	ret

00002960 <__udivmodsi4>:
    2960:	a1 e2       	ldi	r26, 0x21	; 33
    2962:	1a 2e       	mov	r1, r26
    2964:	aa 1b       	sub	r26, r26
    2966:	bb 1b       	sub	r27, r27
    2968:	fd 01       	movw	r30, r26
    296a:	0d c0       	rjmp	.+26     	; 0x2986 <__udivmodsi4_ep>

0000296c <__udivmodsi4_loop>:
    296c:	aa 1f       	adc	r26, r26
    296e:	bb 1f       	adc	r27, r27
    2970:	ee 1f       	adc	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	a2 17       	cp	r26, r18
    2976:	b3 07       	cpc	r27, r19
    2978:	e4 07       	cpc	r30, r20
    297a:	f5 07       	cpc	r31, r21
    297c:	20 f0       	brcs	.+8      	; 0x2986 <__udivmodsi4_ep>
    297e:	a2 1b       	sub	r26, r18
    2980:	b3 0b       	sbc	r27, r19
    2982:	e4 0b       	sbc	r30, r20
    2984:	f5 0b       	sbc	r31, r21

00002986 <__udivmodsi4_ep>:
    2986:	66 1f       	adc	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	88 1f       	adc	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	1a 94       	dec	r1
    2990:	69 f7       	brne	.-38     	; 0x296c <__udivmodsi4_loop>
    2992:	60 95       	com	r22
    2994:	70 95       	com	r23
    2996:	80 95       	com	r24
    2998:	90 95       	com	r25
    299a:	9b 01       	movw	r18, r22
    299c:	ac 01       	movw	r20, r24
    299e:	bd 01       	movw	r22, r26
    29a0:	cf 01       	movw	r24, r30
    29a2:	08 95       	ret

000029a4 <__prologue_saves__>:
    29a4:	2f 92       	push	r2
    29a6:	3f 92       	push	r3
    29a8:	4f 92       	push	r4
    29aa:	5f 92       	push	r5
    29ac:	6f 92       	push	r6
    29ae:	7f 92       	push	r7
    29b0:	8f 92       	push	r8
    29b2:	9f 92       	push	r9
    29b4:	af 92       	push	r10
    29b6:	bf 92       	push	r11
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	ca 1b       	sub	r28, r26
    29ce:	db 0b       	sbc	r29, r27
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	09 94       	ijmp

000029dc <__epilogue_restores__>:
    29dc:	2a 88       	ldd	r2, Y+18	; 0x12
    29de:	39 88       	ldd	r3, Y+17	; 0x11
    29e0:	48 88       	ldd	r4, Y+16	; 0x10
    29e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ee:	b9 84       	ldd	r11, Y+9	; 0x09
    29f0:	c8 84       	ldd	r12, Y+8	; 0x08
    29f2:	df 80       	ldd	r13, Y+7	; 0x07
    29f4:	ee 80       	ldd	r14, Y+6	; 0x06
    29f6:	fd 80       	ldd	r15, Y+5	; 0x05
    29f8:	0c 81       	ldd	r16, Y+4	; 0x04
    29fa:	1b 81       	ldd	r17, Y+3	; 0x03
    29fc:	aa 81       	ldd	r26, Y+2	; 0x02
    29fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2a00:	ce 0f       	add	r28, r30
    2a02:	d1 1d       	adc	r29, r1
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	ed 01       	movw	r28, r26
    2a10:	08 95       	ret

00002a12 <_exit>:
    2a12:	f8 94       	cli

00002a14 <__stop_program>:
    2a14:	ff cf       	rjmp	.-2      	; 0x2a14 <__stop_program>
